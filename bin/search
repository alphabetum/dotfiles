#!/usr/bin/env bash
#########################################################################
# search - a bask script
#
# Add this script and bask to your $PATH. For usage information, run:
# search help
#########################################################################

source "$(which bask)"

desc "HELP_HEADER" <<EOM
                              __
   ________  ____ ___________/ /_
  / ___/ _ \\\/ __ \`/ ___/ ___/ __ \\\\
 (__  )  __/ /_/ / /  / /__/ / / /
/____/\\\___/\\\__,_/_/   \\\___/_/ /_/
EOM

###############################################################################
# Terminal Browser
###############################################################################

# _DEFAULT_TERM_BROWSER="elinks"
# _DEFAULT_TERM_BROWSER="lynx"
_DEFAULT_TERM_BROWSER="w3m"

###############################################################################
# Base URLs
###############################################################################

_GOOGLE_URL="https://www.google.com/search?q="
_BING_URL="https://www.bing.com/search?q="
_YAHOO_URL="https://search.yahoo.com/search?p="
_DUCKDUCKGO_URL="https://www.duckduckgo.com/?q="
_YANDEX_URL="https://yandex.ru/yandsearch?text="

###############################################################################
# Functions
###############################################################################

# _get_open_cmd()
#
# Usage:
#   _get_open_cmd
#
# Description:
#   Print the open command, given the current environment.
_get_open_cmd() {
  local open_cmd=
  if ( \
    [[ -n "$_DEFAULT_TERM_BROWSER" ]] && \
    _command_exists "$_DEFAULT_TERM_BROWSER"
  ); then
    open_cmd="$_DEFAULT_TERM_BROWSER"
  else
    case "$OSTYPE" in
      darwin*)  open_cmd="open" ;;
      cygwin*)  open_cmd="cygstart" ;;
      linux*)   open_cmd="xdg-open" ;;
      *)        echo "Platform $OSTYPE not supported"
                return 1
                ;;
    esac
  fi
  printf "%s" "$open_cmd"
}

# _join_query()
#
# Usage:
#   _join_query <query>
_join_query() {
  local _joined_query
  _joined_query="$(_join "+" "$@")"
  printf "%s\n" "$_joined_query"
}

# __search()
#
# Usage:
#   __search <base url> [<query>]
__search() {
  local open_cmd
  local base_url
  local joined_query
  local search_url

  open_cmd="$(_get_open_cmd)"
  base_url="$1"

  if [[ -z "${2:-}" ]]; then
    search_url="$(printf "%s\n" "$base_url" | sed "s_[^/]*\$__" )"
  else
    joined_query="$(_join_query "${@:2}")"
    search_url="${base_url}${joined_query}"
  fi

  if [[ ! "$open_cmd" == "$_DEFAULT_TERM_BROWSER" ]]; then
   "$open_cmd" "${search_url}" &>/dev/null
  else
    "$open_cmd" "${search_url}"
  fi
}

###############################################################################
# Local Search
###############################################################################

# ------------------------------------------------------------------------ find

desc "find" <<EOM
Usage:
  find <filename> [<directory>]

Description:
  Search for a file with a given filename in the a directory subtree
  using the \`find\` utility. By default, this is really just an alias for:
    \`find . -name <filename>\`
  When the <directory> argument is provided, find uses that directory as the
  subtree root.
EOM
_FIND_CMD="$(which find)"
find() {
  if [[ -z "${1:-}" ]]; then
    _die printf "Query missing.\n"
  fi
  local _directory="."
  if _present "${2:-}" && [[ -d "$2" ]]; then
    _directory="$2"
  fi

  "$_FIND_CMD" "$_directory" -name "$1"
}

# ------------------------------------------------------------------- Spotlight

# Only load this if `mdfind` is present on the system.
if _command_exists "mdfind"; then
desc spotlight <<EOM
Usage:
  spotlight <full text query | filename> [<directory>]
  spotlight ( -f | --filename ) <filename> [<directory>]
  spotlight ( --fulltext | -c | --content ) <query> [<directory>]

Options:
  -f --filename             A filename to search for.
  --fulltext -c --content   Text to search for in file contents.

Description:
  Search using spotlight.

  When no options are used, this behaves as if the query was typed into the
  Spotlight menu and will return hits for both the filename and content. When
  a <directory> argument is provided, the search will be scoped to that
  directory and its subtree.

  This command wraps \`mdfind\` and only works on OS X.
EOM
spotlight() {
  local _search_type=
  local _query=
  local _directory=

  for arg in "${COMMAND_ARGV[@]:1}"; do
    case $arg in
      -f|--filename)
        _search_type="filename"
        ;;
      --fulltext|-c|--content)
        _search_type="fulltext"
        ;;
      *)
        if _blank "$_query"; then
          _query="$arg"
        elif _blank "$_directory"; then
          _directory="$arg"
        fi
        ;;
    esac
  done

  _debug printf "search spotlight() \$_query: %s\n" "$_query"
  _debug printf "search spotlight() \$_directory: %s\n" "$_directory"

  if [[ -z "${_query:-}" ]]; then
    _die printf "Query missing.\n"
  fi

  case "$_search_type" in
    filename)
      if _present "$_directory"; then
        mdfind "kMDItemDisplayName == '$_query'wc" -onlyin "$_directory"
      else
        mdfind "kMDItemDisplayName == '$_query'wc"
      fi
      ;;
    fulltext)
      if _present "$_directory"; then
        mdfind "kMDItemTextContent == '$_query'wc" -onlyin "$_directory"
      else
        mdfind "kMDItemTextContent == '$_query'wc"
      fi
      ;;
    *)
      if _present "$_directory"; then
        mdfind -interpret "$_query" -onlyin "$_directory"
      else
        mdfind -interpret "$_query"
      fi
      ;;
  esac
}
fi

###############################################################################
# Search Engines
###############################################################################

# ------------------------------------------------------------------------ bing

desc "bing" <<EOM
Usage:
  $_ME bing [<query>]

Description:
  Search with Bing.
EOM
bing() {
  __search "$_BING_URL" "$@"
}

# ------------------------------------------------------------------------- ddg

desc "ddg" <<EOM
Usage:
  $_ME ddg [<query>]

Description:
  Search with DuckDuckGo.
EOM
ddg() {
  __search "$_DUCKDUCKGO_URL" "$@"
}

# ---------------------------------------------------------------------- google

desc "google" <<EOM
Usage:
  $_ME google [<query>]

Description:
  Search with Google.
EOM
google() {
  __search "$_GOOGLE_URL" "$@"
}

# ----------------------------------------------------------------------- yahoo

desc "yahoo" <<EOM
Usage:
  $_ME yahoo [<query>]

Description:
  Search with Yahoo!
EOM
yahoo() {
  __search "$_YAHOO_URL" "$@"
}


# ---------------------------------------------------------------------- yandex

desc "yandex" <<EOM
Usage:
  $_ME yandex [<query>]

Description:
  Search with Yandex.
EOM
yandex() {
  __search "$_YANDEX_URL" "$@"
}

###############################################################################
# DuckDuckGo !bang Searches
###############################################################################

# ----------------------------------------------------------------------- ducky

desc "ducky" <<EOM
Usage:
  $_ME ducky [<query>]

Description:
  I feel ducky.
EOM
ducky() {
  __search "$_DUCKDUCKGO_URL" "\\! ${*}"
}

# ------------------------------------------------------------------ graphemica

desc "graphemica" <<EOM
Usage:
  $_ME graphemica [<query>]

Description:
  Search Graphemica, for people who â™¥ letters, numbers, punctuation, &c.
EOM
graphemica() {
  __search "$_DUCKDUCKGO_URL" "\\!graphemica ${*}"
}

# ----------------------------------------------------------------------- image

desc "image" <<EOM
Usage:
  $_ME image [<query>]

Description:
  Search Google Images.
EOM
image() {
  __search "$_DUCKDUCKGO_URL" "\\!i ${*}"
}

# ------------------------------------------------------------------------- map

desc "map" <<EOM
Usage:
  $_ME map [<query>]

Description:
  Search Google Maps.
EOM
map() {
  __search "$_DUCKDUCKGO_URL" "\\!m ${*}"
}

# ------------------------------------------------------------------------ news

desc "news" <<EOM
Usage:
  $_ME news [<query>]

Description:
  Search Google News.
EOM
news() {
  __search "$_DUCKDUCKGO_URL" "\\!n ${*}"
}

# --------------------------------------------------------------------- youtube

desc "youtube" <<EOM
Usage:
  $_ME youtube [<query>]

Description:
  Search YouTube.
EOM
youtube() {
  __search "$_DUCKDUCKGO_URL" "\\!yt ${*}"
}

# ------------------------------------------------------------------------ wiki

desc "wiki" <<EOM
Usage:
  $_ME wiki [<query>]

Description:
  Search Wikipedia.
EOM
wiki() {
  __search "$_DUCKDUCKGO_URL" "\\!w ${*}"
}

_init
