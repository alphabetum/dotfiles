#!/usr/bin/env bash
###############################################################################
# generate - a bask script
#
# Get bask:
#   https://github.com/alphabetum/bask
#
# Add this script and the bask program to your $PATH.
#
# For usage information, run:
#   generate help
###############################################################################

source "$(which bask)"

# font: chunky
desc "HELP_HEADER" <<EOM
                                     __
.-----.-----.-----.-----.----.---.-.|  |_.-----.
|  _  |  -__|     |  -__|   _|  _  ||   _|  -__|
|___  |_____|__|__|_____|__| |___._||____|_____|
|_____|

generate

A small tool for generating things.
EOM

# --------------------------------------------------------------------- dataurl

desc "dataurl" <<EOM
Usage:
  dataurl <path/to/file>

Description:
  Create a data URL from a given file.
EOM
dataurl() {
  local mimeType
  local _file_path="${1:-}"

  if [[ -z "${_file_path}" ]]
  then
    _die printf "Missing file path.\n"
  elif [[ ! -e "${_file_path}" ]]
  then
    _die printf "Invalid file path: %s\n" "${_file_path}"
  fi

  # When running `file`, set LC_ALL to `C` to avoid the following error:
  #   ERROR: line 22: regexec error 17, (illegal byte sequence)
  # Once the command is run, set the variable back to its original value.
  #
  # More information:
  # - http://stackoverflow.com/a/11287641
  # - https://trac.macports.org/ticket/38771
  #
  # Step descriptions included for clarity:
  #
  # 1. Save original LC_ALL and set to 'C'
  local original_LC_ALL="$LC_ALL"
  export LC_ALL=C
  # 2. Run `file` with new LC_ALL value
  mimeType=$(file -b --mime-type "$1")
  # 3. Set LC_ALL back to the original value.
  export LC_ALL="$original_LC_ALL"

  if [[ $mimeType == text/* ]]
  then
    mimeType="${mimeType};charset=utf-8"
  fi
  # Include trailing newline in output for easier manual selection.
  printf \
    "data:${mimeType};base64,%s\n" \
    "$(openssl base64 -in "$1" | tr -d '\n')"
}

# ---------------------------------------------------------------------- string

desc "string" <<EOM
Usage:
  $_ME string [<length>] [( -u | --uppercase | -l | --lowercase)]

Options:
  -u --uppercase  Convert all alpha characters to uppercase.
  -l --lowercase  Convert all alpha characters to lowercase.

Description:
  Generate a random alphanumeric string.
EOM
# More info:  https://gist.github.com/earthgecko/3089509
string() {
  # NOTE: set `LC_ALL=C` to avoid invalid byte sequence errors from `tr`.
  # More info: http://unix.stackexchange.com/a/141423
  export LC_ALL=C
  local length=32
  local letter_case
  local raw_string
  local cased_string

  _debug printf "string() \$*: %s\n" "$*"

  for arg in "${@:-}"
  do
    case $arg in
      -u|--upper|--uppercase) letter_case="UPPER";;
      -l|--lower|--lowercase) letter_case="LOWER";;
      -*)
        _die printf "Unrecognized option: %s\n" "$arg"
        ;;
      *)
        if [[ "$length" == "32" ]] && [[ -n "$arg" ]]
        then
          if [[ "$arg" =~ ^[[:digit:]]+ ]]
          then
            length="$arg"
          else
            _die printf "Invalid argument: %s\n" "$arg"
          fi
        else
          : # do nothing.
        fi
        ;;
    esac
  done

  _debug printf "string() \$length: %s\n" "$length"

  # NOTE: This command exits with a 141 status due to `head` exiting while
  # `fold` is still writing to the pipe. In order to circumvent this with
  # pipefail enabled, ignore errors by falling back to `return 0`.
  #
  # More info: http://stackoverflow.com/a/19120674
  raw_string="$(
    cat /dev/urandom      | \
      tr -dc 'a-zA-Z0-9'  | \
      fold -w "${length}" | \
      head -n 1 || \
      return 0
  )"
  _debug printf "string() \$raw_string: %s\n" "$raw_string"

  case "${letter_case:-}" in
    UPPER)
      _debug printf "string() UPPER\n"
      cased_string="$(
        printf "%s\n" "$raw_string" | tr '[:lower:]' '[:upper:]'
      )"
      ;;
    LOWER)
      _debug printf "string() LOWER\n"
      cased_string="$(
        printf "%s\n" "$raw_string" | tr '[:upper:]' '[:lower:]'
      )"
      ;;
    *)
      _debug printf "string() NO LETTER CASE\n"
      cased_string="$raw_string"
      ;;
  esac

  printf "%s\n" "$cased_string"
}

_init
