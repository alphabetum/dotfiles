#!/usr/bin/env bash
###############################################################################
# ascii-art - a bask script
#
# Add this script and bask to your $PATH. For usage information, run:
# ascii-art help
###############################################################################

source "$(which bask)"

desc "HELP_HEADER" <<EOM
                     .__.__                         __
_____    ______ ____ |__|__|         _____ ________/  |_
\__  \\\\  /  ___// ___\\\\|  |  |  ______ \\\\__  \\\\\\\\_  __ \\\\   __\\\\
 / __ \\\\_\\\\___ \\\\\\  \\\\___|  |  | /_____/  / __ \\\\|  | \\\\/|  |
(____  /____  >\\___  >__|__|         (____  /__|   |__|
     \\\\/     \\\\/     \\\\/                     \\\\/

Command line bookmarks for ascii art utilities.
EOM

# ---------------------------------------------------------------------- cowsay

_cowsay_ABOUT="
About cowsay / cowthink:
  Configurable speaking/thinking cow (and a bit more)

  Cowsay generates an ASCII picture of a cow saying  something  provided  by
  the user.

  https://web.archive.org/web/20120225123719/http://www.nog.net/~tony/warez/cowsay.shtml
"
_cowsay_CMD="$(which cowsay)" || _die \
  printf \
    "cowsay not installed. %s\n" \
    "${_cowsay_ABOUT}"
desc "cowsay" <<EOM
cow{say,think} version 3.03, (c) 1999 Tony Monroe
Usage: cowsay [-bdgpstwy] [-h] [-e eyes] [-f cowfile]
          [-l] [-n] [-T tongue] [-W wrapcolumn] [message]
${_cowsay_ABOUT}
EOM
cowsay() {
  if [[ -z "$1" ]]; then
    "${_cowsay_CMD}"
  else
    "${_cowsay_CMD}" "${@}"
  fi
}

# -------------------------------------------------------------------- cowthink

_cowthink_CMD="$(which cowthink)" || _die \
  printf \
    "cowsay not installed. %s\n" \
    "${_cowsay_ABOUT}"
desc "cowthink" <<EOM
cow{say,think} version 3.03, (c) 1999 Tony Monroe
Usage: cowsay [-bdgpstwy] [-h] [-e eyes] [-f cowfile]
          [-l] [-n] [-T tongue] [-W wrapcolumn] [message]
${_cowsay_ABOUT}
EOM
cowthink() {
  if [[ -z "$1" ]]; then
    "${_cowthink_CMD}"
  else
    "${_cowthink_CMD}" "${@}"
  fi
}


# ---------------------------------------------------------------------- figlet

_figlet_ABOUT="
About Figlet:
  FIGlet is a program for making large letters out of ordinary text

  http://www.figlet.org/
"
_figlet_CMD="$(which figlet)" || _die \
  printf \
    "figlet not installed. %s\n" \
    "${_figlet_ABOUT}"
desc "figlet" <<EOM
Usage: figlet [ -cklnoprstvxDELNRSWX ] [ -d fontdirectory ]
              [ -f fontfile ] [ -m smushmode ] [ -w outputwidth ]
              [ -C controlfile ] [ -I infocode ] [ message ]
${_figlet_ABOUT}
EOM
figlet() {
  if [[ -z "$1" ]]; then
    "${_figlet_CMD}"
  else
    "${_figlet_CMD}" "${@}"
  fi
}

# ---------------------------------------------------------------------- figlist

_figlist_CMD="$(which figlist)" || _die \
  printf \
    "figlet not installed. %s\n" \
    "${_figlet_ABOUT}"
desc "figlist" <<EOM
Usage:
  figlist [ -d directory ]

Description:
  Lists figlet fonts and control files.
${_figlet_ABOUT}
EOM
figlist() {
  if [[ -z "$1" ]]; then
    "${_figlist_CMD}"
  else
    "${_figlist_CMD}" "${@}"
  fi
}

# ------------------------------------------------------------------------ jp2a

_jp2a_ABOUT="
About jp2a:
  jp2a is a small utility that converts JPG images to ASCII.
  It's written in C and released under the GPL.

  http://csl.sublevel3.org/jp2a/
"
_jp2a_CMD="$(which jp2a)" || _die \
  printf \
    "jp2a not installed. %s\n" \
    "${_jp2a_ABOUT}"
_jp2a_HELP="$("${_jp2a_CMD}" --help 2>&1)"
desc "jp2a" <<EOM
${_jp2a_HELP}
${_jp2a_ABOUT}
EOM
jp2a() {
  if [[ -z "$1" ]]; then
    "${_jp2a_CMD}"
  else
    "${_jp2a_CMD}" "${@}"
  fi
}

# --------------------------------------------------------------------- mplayer

_mplayer_ABOUT="
About MPlayer:
  MPlayer is a free software and open source media player.

  http://www.mplayerhq.hu/
  https://en.wikipedia.org/wiki/MPlayer

  AAlib:
    AAlib is a software library which allows applications to automatically
    convert still and moving images into ASCII art.

    http://aa-project.sourceforge.net/aalib/
    https://en.wikipedia.org/wiki/AAlib

  Libcaca:
    libcaca is a graphics library that outputs text instead of pixels, so that
    it can work on older video cards or text terminals.

    http://caca.zoy.org/wiki/libcaca

  See also:
    http://archive.oreilly.com/pub/h/4441
"
_mplayer_CMD="$(which mplayer)" || _die \
  printf \
    "MPlayer not installed. %s\n" \
    "${_mplayer_ABOUT}"
desc "mplayer" <<EOM
Usage:
  mplayer -vo aa <video> [<options>]
  mplayer -vo caca <video> [<options>]

Options:
  -vo aa    AAlib output.
  -vo caca  Libcaca output.

Description:
  Display video as text in terminal.
${_mplayer_ABOUT}
EOM
mplayer() {
  if [[ -z "$1" ]]; then
    _print_desc "mplayer"
  else
    "${_mplayer_CMD}" "${@}"
  fi
}

# ---------------------------------------------------------------- showfigfonts

_showfigfonts_CMD="$(which showfigfonts)" || _die \
  printf \
    "figlet not installed. %s\n" \
    "${_figlet_ABOUT}"
desc "showfigfonts" <<EOM
Usage:
  showfigfonts [ -d directory ] [ word ]

Description:
  Prints a list of available figlet fonts.
${_figlet_ABOUT}
EOM
showfigfonts() {
  if [[ -z "$1" ]]; then
    "${_showfigfonts_CMD}"
  else
    "${_showfigfonts_CMD}" "${@}"
  fi
}

# ---------------------------------------------------------------------- toilet

_toilet_ABOUT="
About TOIlet:
  The TOIlet project attempts to create a free replacement for the FIGlet
  utility. TOIlet stands for “The Other Implementation’s letters”, coined
  after FIGlet’s “Frank, Ian and Glen’s letters”.

  TOIlet is in its very early development phase. It uses the powerful libcaca
  library to achieve various text-based effects.

  TOIlet also aims for full FIGlet compatibility.

  http://caca.zoy.org/wiki/toilet
"
_toilet_CMD="$(which toilet)" || _die \
  printf \
    "toilet not installed. %s\n" \
    "${_toilet_ABOUT}"
_toilet_HELP="$("${_toilet_CMD}" --help)"
desc "toilet" <<EOM
${_toilet_HELP}
${_toilet_ABOUT}
EOM
toilet() {
  if [[ -z "$1" ]]; then
    "${_toilet_CMD}"
  else
    "${_toilet_CMD}" "${@}"
  fi
}

_init
