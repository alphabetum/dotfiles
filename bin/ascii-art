#!/usr/bin/env bash
###############################################################################
# ascii-art - a bask script
#
# Add this script and bask to your $PATH. For usage information, run:
# ascii-art help
###############################################################################

source "$(which bask)"

desc "HELP_HEADER" <<EOM
                     .__.__                         __
_____    ______ ____ |__|__|         _____ ________/  |_
\__  \\\\  /  ___// ___\\\\|  |  |  ______ \\\\__  \\\\\\\\_  __ \\\\   __\\\\
 / __ \\\\_\\\\___ \\\\\\  \\\\___|  |  | /_____/  / __ \\\\|  | \\\\/|  |
(____  /____  >\\___  >__|__|         (____  /__|   |__|
     \\\\/     \\\\/     \\\\/                     \\\\/

ASCII-ART

Command line bookmarks for ascii art utilities.
EOM

# ---------------------------------------------------------------------- cowsay

_cowsay_ABOUT="
About cowsay / cowthink:
  Configurable speaking/thinking cow (and a bit more)

  Cowsay generates an ASCII picture of a cow saying  something  provided  by
  the user.

  https://web.archive.org/web/20120225123719/http://www.nog.net/~tony/warez/cowsay.shtml
"
_cowsay_CMD="$(which cowsay || true)"
if ! _command_exists "${_cowsay_CMD}"; then
  desc "cowsay" <<EOM
cowsay not installed.
${_cowsay_ABOUT}
EOM
else
  desc "cowsay" <<EOM
cow{say,think} version 3.03, (c) 1999 Tony Monroe
Usage: cowsay [-bdgpstwy] [-h] [-e eyes] [-f cowfile]
          [-l] [-n] [-T tongue] [-W wrapcolumn] [message]
${_cowsay_ABOUT}
EOM
fi
cowsay() {
  if ! _command_exists "${_cowsay_CMD}"; then
    _die _print_desc "cowsay"
  fi
  if [[ -z "$1" ]]; then
    "${_cowsay_CMD}"
  else
    "${_cowsay_CMD}" "${@}"
  fi
}

# -------------------------------------------------------------------- cowthink

_cowthink_CMD="$(which cowthink || true)"
if ! _command_exists "${_cowthink_CMD}"; then
  desc "cowthink" <<EOM
cowsay / cowthink not installed.
${_cowsay_ABOUT}
EOM
else
  desc "cowthink" <<EOM
cow{say,think} version 3.03, (c) 1999 Tony Monroe
Usage: cowsay [-bdgpstwy] [-h] [-e eyes] [-f cowfile]
          [-l] [-n] [-T tongue] [-W wrapcolumn] [message]
${_cowsay_ABOUT}
EOM
fi
cowthink() {
  if ! _command_exists "${_cowthink_CMD}"; then
    _die _print_desc "cowthink"
  fi
  if [[ -z "$1" ]]; then
    "${_cowthink_CMD}"
  else
    "${_cowthink_CMD}" "${@}"
  fi
}

# ---------------------------------------------------------------------- figlet

_figlet_ABOUT="
About Figlet:
  FIGlet is a program for making large letters out of ordinary text

  http://www.figlet.org/
"
_figlet_CMD="$(which figlet || true)"
if ! _command_exists "${_figlet_CMD}"; then
  desc "figlet" <<EOM
figlet not installed.
${_figlet_ABOUT}
EOM
else
  desc "figlet" <<EOM
Usage: figlet [ -cklnoprstvxDELNRSWX ] [ -d fontdirectory ]
              [ -f fontfile ] [ -m smushmode ] [ -w outputwidth ]
              [ -C controlfile ] [ -I infocode ] [ message ]
${_figlet_ABOUT}
EOM
fi
figlet() {
  if ! _command_exists "${_figlet_CMD}"; then
    _die _print_desc "figlet"
  fi
  if [[ -z "$1" ]]; then
    "${_figlet_CMD}"
  else
    "${_figlet_CMD}" "${@}"
  fi
}

# ---------------------------------------------------------------------- figlist

_figlist_CMD="$(which figlist || true)"
if ! _command_exists "${_figlist_CMD}"; then
  desc "figlist" <<EOM
figlet not installed.
${_figlet_ABOUT}
EOM
else
  desc "figlist" <<EOM
Usage:
  figlist [ -d directory ]

Description:
  Lists figlet fonts and control files.
${_figlet_ABOUT}
EOM
fi
figlist() {
  if ! _command_exists "${_figlist_CMD}"; then
    _die _print_desc "figlist"
  fi
  if [[ -z "$1" ]]; then
    "${_figlist_CMD}"
  else
    "${_figlist_CMD}" "${@}"
  fi
}

# ------------------------------------------------------------------------ jp2a

_jp2a_ABOUT="
About jp2a:
  jp2a is a small utility that converts JPG images to ASCII.
  It's written in C and released under the GPL.

  http://csl.sublevel3.org/jp2a/
"
_jp2a_CMD="$(which jp2a || true)"
if ! _command_exists "${_jp2a_CMD}"; then
  desc "jp2a" <<EOM
jp2a not installed.
${_jp2a_ABOUT}
EOM
else
  _jp2a_HELP="$("${_jp2a_CMD}" --help 2>&1 || true)"
  desc "jp2a" <<EOM
${_jp2a_HELP}
${_jp2a_ABOUT}
EOM
fi
jp2a() {
  if ! _command_exists "${_jp2a_CMD}"; then
    _die _print_desc "jp2a"
  fi
  if [[ -z "$1" ]]; then
    "${_jp2a_CMD}"
  else
    "${_jp2a_CMD}" "${@}"
  fi
}

# --------------------------------------------------------------------- mplayer

_mplayer_ABOUT="
About MPlayer:
  MPlayer is a free software and open source media player.

  http://www.mplayerhq.hu/
  https://en.wikipedia.org/wiki/MPlayer

  AAlib:
    AAlib is a software library which allows applications to automatically
    convert still and moving images into ASCII art.

    http://aa-project.sourceforge.net/aalib/
    https://en.wikipedia.org/wiki/AAlib

  Libcaca:
    libcaca is a graphics library that outputs text instead of pixels, so that
    it can work on older video cards or text terminals.

    http://caca.zoy.org/wiki/libcaca

  See also:
    http://archive.oreilly.com/pub/h/4441
"
_mplayer_CMD="$(which mplayer || true)"
if ! _command_exists "${_mplayer_CMD}"; then
  desc "mplayer" <<EOM
MPlayer not installed.
${_mplayer_ABOUT}
EOM
else
  desc "mplayer" <<EOM
Usage:
  mplayer -vo aa <video> [<options>]
  mplayer -vo caca <video> [<options>]

Options:
  -vo aa    AAlib output.
  -vo caca  Libcaca output.

Description:
  Display video as text in terminal.
${_mplayer_ABOUT}
EOM
fi
mplayer() {
  if ! _command_exists  "${_mplayer_CMD}"; then
    _die _print_desc "mplayer"
  fi
  if [[ -z "$1" ]]; then
    _print_desc "mplayer"
  else
    "${_mplayer_CMD}" "${@}"
  fi
}

# ---------------------------------------------------------------- showfigfonts

_showfigfonts_CMD="$(which showfigfonts || true)"
if ! _command_exists "showfigfonts"; then
  desc "showfigfonts" <<EOM
figlet not installed.
${_figlet_ABOUT}
EOM
else
  desc "showfigfonts" <<EOM
Usage:
  showfigfonts [ -d directory ] [ word ]

Description:
  Prints a list of available figlet fonts.
${_figlet_ABOUT}
EOM
fi
showfigfonts() {
  if ! _command_exists  "${_showfigfonts_CMD}"; then
    _die _print_desc "showfigfonts"
  fi
  if [[ -z "$1" ]]; then
    "${_showfigfonts_CMD}"
  else
    "${_showfigfonts_CMD}" "${@}"
  fi
}

# ---------------------------------------------------------------------- toilet

_toilet_ABOUT="
About TOIlet:
  The TOIlet project attempts to create a free replacement for the FIGlet
  utility. TOIlet stands for “The Other Implementation’s letters”, coined
  after FIGlet’s “Frank, Ian and Glen’s letters”.

  TOIlet is in its very early development phase. It uses the powerful libcaca
  library to achieve various text-based effects.

  TOIlet also aims for full FIGlet compatibility.

  http://caca.zoy.org/wiki/toilet
"
_toilet_CMD="$(which toilet || true)"
if ! _command_exists "${_toilet_CMD}"; then
  desc "toilet" <<EOM
TOIlet not installed.
${_toilet_ABOUT}
EOM
else
  _toilet_HELP="$("${_toilet_CMD}" --help)"
  desc "toilet" <<EOM
${_toilet_HELP}
${_toilet_ABOUT}
EOM
fi
toilet() {
  if ! _command_exists  "${_toilet_CMD}"; then
    _die _print_desc "toilet"
  fi
  if [[ -z "$1" ]]; then
    "${_toilet_CMD}"
  else
    "${_toilet_CMD}" "${@}"
  fi
}

_init
