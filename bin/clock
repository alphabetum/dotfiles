#!/usr/bin/env bash
#
#              _/                      _/
#     _/_/_/  _/    _/_/      _/_/_/  _/  _/
#  _/        _/  _/    _/  _/        _/_/
# _/        _/  _/    _/  _/        _/  _/
#  _/_/_/  _/    _/_/      _/_/_/  _/    _/
#
# Based on Bash Boilerplate: https://github.com/alphabetum/bash-boilerplate
#
# Copyright (c) 2015 William Melody • hi@williammelody.com

###############################################################################
# Strict Mode
###############################################################################

set -o nounset
set -o errexit
set -o pipefail
IFS=$'\n\t'

###############################################################################
# Environment
###############################################################################

_VERSION="0.1.0.alpha"

# $_ME
#
# Set to the program's basename.
_ME=$(basename "$0")

###############################################################################
# Debug
###############################################################################

# _debug()
#
# Usage:
#   _debug printf "Debug info. Variable: %s\n" "$0"
#
# A simple function for executing a specified command if the `$_USE_DEBUG`
# variable has been set. The command is expected to print a message and
# should typically be either `echo`, `printf`, or `cat`.
_debug() {
  if [[ "${_USE_DEBUG:-"0"}" -eq 1 ]]
  then
    # Prefix debug message with "bug (U+1F41B)"
    printf "🐛  "
    "$@"
  fi
}
# debug()
#
# Usage:
#   debug "Debug info. Variable: $0"
#
# Print the specified message if the `$_USE_DEBUG` variable has been set.
#
# This is a shortcut for the _debug() function that simply echos the message.
debug() {
  _debug echo "$@"
}

###############################################################################
# Die
###############################################################################

# _die()
#
# Usage:
#   _die printf "Error message. Variable: %s\n" "$0"
#
# A simple function for exiting with an error after executing the specified
# command. The command is expected to print a message and should typically
# be either `echo`, `printf`, or `cat`.
_die() {
  # Prefix die message with "cross mark (U+274C)", often displayed as a red x.
  printf "❌  "
  "$@" 1>&2
  exit 1
}
# die()
#
# Usage:
#   die "Error message. Variable: $0"
#
# Exit with an error and print the specified message.
#
# This is a shortcut for the _die() function that simply echos the message.
die() {
  _die echo "$@"
}

###############################################################################
# Help
###############################################################################

# _print_help()
#
# Usage: _print_help
#
# Print the program help information.
_print_help() {
  cat <<HEREDOC
            _/                      _/
   _/_/_/  _/    _/_/      _/_/_/  _/  _/
_/        _/  _/    _/  _/        _/_/
_/        _/  _/    _/  _/        _/  _/
 _/_/_/  _/    _/_/      _/_/_/  _/    _/

A wrapper for timetrap, providing a simpler interface for common operations.

Timetrap is a simple command line time tracker written in ruby. It provides \
an easy to use command line interface for tracking what you spend your time \
on. https://github.com/samg/timetrap

Usage:
  $_ME (in | out | timesheet)
  $_ME -h | --help | help
  $_ME --version

Subcommands:
  in         Clock in.
  out        Clock out.
  timesheet  Show the current timesheet.

Options:
  -h --help  Display this help information.
  --version  Display version information.
HEREDOC
}

###############################################################################
# Version
###############################################################################

# _print_version()
#
# Usage: _print_version
#
# Print the value of $_VERSION.
_print_version() {
  printf "%s\n" "$_VERSION"
}

###############################################################################
# Options
###############################################################################

# Steps:
#
# 1. set expected short options in `optstring` at beginning of the "Normalize
#    Options" section,
# 2. parse options in while loop in the "Parse Options" section.

# Normalize Options ###########################################################

# Source:
#   https://github.com/e36freak/templates/blob/master/options

# The first loop, even though it uses 'optstring', will NOT check if an
# option that takes a required argument has the argument provided. That must
# be done within the second loop and case statement, yourself. Its purpose
# is solely to determine that -oARG is split into -o ARG, and not -o -A -R -G.

# Set short options -----------------------------------------------------------

# option string, for short options.
#
# Very much like getopts, expected short options should be appended to the
# string here. Any option followed by a ':' takes a required argument.
optstring=h

# Normalize -------------------------------------------------------------------

# iterate over options, breaking -ab into -a -b and --foo=bar into --foo bar
# also turns -- into --endopts to avoid issues with things like '-o-', the '-'
# should not indicate the end of options, but be an invalid option (or the
# argument to the option, such as wget -qO-)
unset options
# while the number of arguments is greater than 0
while (($#))
do
  case $1 in
    # if option is of type -ab
    -[!-]?*)
      # loop over each character starting with the second
      for ((i=1; i<${#1}; i++))
      do
        # extract 1 character from position 'i'
        c=${1:i:1}
        # add current char to options
        options+=("-$c")

        # if option takes a required argument, and it's not the last char
        # make the rest of the string its argument
        if [[ $optstring = *"$c:"* && ${1:i+1} ]]
        then
          options+=("${1:i+1}")
          break
        fi
      done
      ;;
    # if option is of type --foo=bar, split on first '='
    --?*=*)
      options+=("${1%%=*}" "${1#*=}")
      ;;
    # end of options, stop breaking them up
    --)
      options+=(--endopts)
      shift
      options+=("$@")
      break
      ;;
    # otherwise, nothing special
    *)
      options+=("$1")
      ;;
  esac

  shift
done
# set new positional parameters to altered options. Set default to blank.
set -- "${options[@]:-}"
unset options

# Parse Options ###############################################################

# Initialize program option variables.
_PRINT_HELP=0
_PRINT_VERSION=0
_USE_DEBUG=0

# Initialize additional expected option variables.
_SUBCOMMAND=
_ARGUMENTS=("$0")

# _require_argument()
#
# Usage:
#  _require_argument "$opt" "$_value_variable"
#
# Checks if an value has been set to the expected variable and, if not, prints
# and error message and exits with status 1.
_require_argument() {
  local _option="${1:-}"
  local _value="${2:-}"

  if [[ -z "${_value}" ]]
  then
    _die printf "Option requires an argument: %s\n" "${_option}"
  fi
}
# getopts and getopts have inconsistent behavior, so using a simple home-brewed
# while loop. This isn't perfectly compliant with POSIX, but it's close enough
# and this appears to be a widely used approach.
#
# More info:
#   http://www.gnu.org/software/libc/manual/html_node/Argument-Syntax.html
#   http://stackoverflow.com/a/14203146
#   http://stackoverflow.com/a/7948533
while [ $# -gt 0 ]
do
  __opt="$1"
  shift
  case "${__opt}" in
    -h|--help)
      _PRINT_HELP=1
      ;;
    --debug)
      _USE_DEBUG=1
      ;;
    --version)
      _PRINT_VERSION=1
      ;;
    in|out|timesheet)
      _SUBCOMMAND="${__opt}"
      ;;
    --endopts)
      # Terminate option parsing.
      break
      ;;
    *)
      if [[ -z "${_SUBCOMMAND}" ]]
      then
        _SUBCOMMAND="${__opt}"
      else
        _ARGUMENTS+=("${__opt}")
      fi
      ;;
  esac
done

_debug printf "\$_SUBCOMMAND: %s\n" "${_SUBCOMMAND}"
_debug printf "\$_ARGUMENTS: %s\n" "${_ARGUMENTS[*]:-}"

###############################################################################
# Program Functions
###############################################################################

_clock() {
  _debug printf "_clock() >> start\n"

  case "${_SUBCOMMAND}" in
    "in")
      timetrap "in"
      ;;
    "out")
      timetrap "out"
      ;;
    "timesheet")
      timetrap "display"
      ;;
    "help")
      _print_help
      ;;
    "")
      _print_help
      ;;
    *)
      timetrap "${_SUBCOMMAND}" "${_ARGUMENTS[@]:1}"
      ;;
  esac
}

###############################################################################
# Main
###############################################################################

_main() {
  if ((_PRINT_HELP))
  then
    _print_help
  elif ((_PRINT_VERSION))
  then
    _print_version
  else
    _clock "$@"
  fi
}

_main "$@"
