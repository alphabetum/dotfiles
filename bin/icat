#!/usr/bin/env bash
#  _           _
# (_) ___ __ _| |_
# | |/ __/ _` | __|
# | | (_| (_| | |_
# |_|\___\__,_|\__|
#
# `imagecat` with curl.
#
# Display an image by providing a filename, URL, or standard input stream.
#
# Based on Bash Boilerplate: https://github.com/alphabetum/bash-boilerplate
#
# Copyright (c) 2015 William Melody â€¢ hi@williammelody.com

set -o nounset
set -o errexit
set -o pipefail
IFS=$'\n\t'

###############################################################################
# Dependency / Platform Check
###############################################################################

# command_exists()
#
# Usage:
#   command_exists "command_name"
#
# Returns:
#   0  If the command exists in the current environment.
#   1  If not.
command_exists() {
  hash "$1" 2>/dev/null
}

if ! command_exists "imagecat"
then
  printf "imagecat not found on this system.\n"
  exit 1
fi

###############################################################################
# Environment
###############################################################################

# $_ME
#
# Set to this program's basename.
_ME=$(basename "$0")

###############################################################################
# Help
###############################################################################

read -r -d '' "_program_help" <<EOM || true
 _           _
(_) ___ __ _| |_
| |/ __/ _\` | __|
| | (_| (_| | |_
|_|\___\__,_|\__|

\`imagecat\` with curl.

Display an image by providing a filename, URL, or standard input stream.

Usage:
  $_ME ( <filename> | <url> ) [--wait]
  cat <filename> | $_ME
  $_ME -h | --help

Options:
  --wait     Wait for the user to press a key before exiting.
  -h --help  Show this screen.
EOM

# _print_help()
#
# Usage: _print_help
#
# Print the program help information.
_print_help() {
  printf "%s\n" "${_program_help}"
}

###############################################################################
# Program Functions
###############################################################################

# _interactive_input()
#
# Usage:
#   _interactive_input
#
# Returns:
#   0  If the current input is interactive (eg, a shell).
#   1  If the current input is stdin / piped input.
_interactive_input() {
  [[ -t 0 ]]
}

# _icat()
#
# Usage:
#   _icat <filename>
#   _icat <url>
#   _icat <arguments>
#   cat <filename> | _icat
#
# Description:
_icat() {
  if _interactive_input
  then
    local _source=${1:-}
    local _url_regex='(https?|ftp|file)://[-A-Za-z0-9\+&@#/%?=~_|!:,.;]*[-A-Za-z0-9\+&@#/%=~_|]'
    if [[ -z "${_source}" ]]
    then
      $_ME -h
    else
      if [[ "${_source}" =~ $_url_regex  ]]
      then # if the source is a URL.
        curl -Ls "${_source}" | imagecat
      else
        cat "${_source}" | imagecat
      fi
    fi
  else
    # Pass the pipe.
    cat | imagecat
  fi
}

###############################################################################
# Main
###############################################################################

# _main()
#
# Usage:
#   _main [<options>] [<arguments>]
#
# Description:
#   Entry point for the program, handling basic option parsing and dispatching.
_main() {
  local -a _arguments
  local _wait=0

  for _arg in "${@:-}"
  do
    case "${_arg}" in
      -h|--help)
        _print_help
        return 0
        ;;
      --wait)
        _wait=1
        ;;
      *)
        _arguments+=("${_arg}")
        ;;
    esac
  done

  _icat "${_arguments[@]:-}"

  if ((_wait))
  then
    read -rsp $'Press any key to continue...\n' -n1 key
  fi
}

# Call `_main` after everything has been defined.
_main "$@"
