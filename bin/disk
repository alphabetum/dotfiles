#!/usr/bin/env bash
#      _ _     _
#   __| (_)___| | __
#  / _` | / __| |/ /
# | (_| | \__ \   <
#  \__,_|_|___/_|\_\
#
# Based on Bash Boilerplate: https://github.com/alphabetum/bash-boilerplate
#
# Copyright (c) 2015 William Melody • hi@williammelody.com

###############################################################################
# Strict Mode
###############################################################################

set -o nounset
set -o errexit
set -o pipefail
IFS=$'\n\t'

###############################################################################
# Environment
###############################################################################

_VERSION="0.1.0.alpha"

# $_ME
#
# Set to the program's basename.
_ME=$(basename "$0")

###############################################################################
# Debug
###############################################################################

# _debug()
#
# Usage:
#   _debug printf "Debug info. Variable: %s\n" "$0"
#
# A simple function for executing a specified command if the `$_USE_DEBUG`
# variable has been set. The command is expected to print a message and
# should typically be either `echo`, `printf`, or `cat`.
_debug() {
  if [[ "${_USE_DEBUG:-"0"}" -eq 1 ]]
  then
    # Prefix debug message with "bug (U+1F41B)"
    printf "🐛  "
    "$@"
  fi
}
# debug()
#
# Usage:
#   debug "Debug info. Variable: $0"
#
# Print the specified message if the `$_USE_DEBUG` variable has been set.
#
# This is a shortcut for the _debug() function that simply echos the message.
debug() {
  _debug echo "$@"
}

###############################################################################
# Die
###############################################################################

# _die()
#
# Usage:
#   _die printf "Error message. Variable: %s\n" "$0"
#
# A simple function for exiting with an error after executing the specified
# command. The command is expected to print a message and should typically
# be either `echo`, `printf`, or `cat`.
_die() {
  # Prefix die message with "cross mark (U+274C)", often displayed as a red x.
  printf "❌  "
  "$@" 1>&2
  exit 1
}
# die()
#
# Usage:
#   die "Error message. Variable: $0"
#
# Exit with an error and print the specified message.
#
# This is a shortcut for the _die() function that simply echos the message.
die() {
  _die echo "$@"
}

###############################################################################
# Help
###############################################################################

# Set $_program_help
#
# The `read` form of assignment is used for a balance of ease of
# implementation and simplicity. There is an alternative assignment form
# that could be used here:
#
# var="$(cat <<'EOM'
# some message
# EOM
# )
#
# However, this form appears to require trailing space after backslashes to
# preserve newlines, which is unexpected. Using `read` simply requires
# escaping backslashes, which is more common.
read -r -d '' "_program_help" <<EOM || true
     _ _     _
  __| (_)___| | __
 / _\` | / __| |/ /
| (_| | \__ \   <
 \__,_|_|___/_|\_\\

A wrapper with shortcuts for commands that measure disk usage.

Usage:
  $_ME (free | used | explore | graph)
  $_ME -h | --help | help
  $_ME --version

Subcommands:
  free     Display free disk space using the df tool.
  used     Display disk usage of the current directory using the du tool.
  explore  Explore disk usage using the ncdu tool.
           More information:
           http://dev.yorhel.nl/ncdu
  graph    Graph disk usage of the current directory using the ohmu tool.
           More information:
           https://github.com/paul-nechifor/ohmu

Options:
  -h --help  Display this help information.
  --version  Display version information.
EOM

# _print_help()
#
# Usage: _print_help
#
# Print the program help information.
_print_help() {
  printf "%s\n" "$_program_help"
}

###############################################################################
# Version
###############################################################################

# _print_version()
#
# Usage: _print_version
#
# Print the value of $_VERSION.
_print_version() {
  printf "%s\n" "$_VERSION"
}

###############################################################################
# Options
###############################################################################

# Steps:
#
# 1. set expected short options in `optstring` at beginning of the "Normalize
#    Options" section,
# 2. parse options in while loop in the "Parse Options" section.

# Normalize Options ###########################################################

# Source:
#   https://github.com/e36freak/templates/blob/master/options

# The first loop, even though it uses 'optstring', will NOT check if an
# option that takes a required argument has the argument provided. That must
# be done within the second loop and case statement, yourself. Its purpose
# is solely to determine that -oARG is split into -o ARG, and not -o -A -R -G.

# Set short options -----------------------------------------------------------

# option string, for short options.
#
# Very much like getopts, expected short options should be appended to the
# string here. Any option followed by a ':' takes a required argument.
optstring=h

# Normalize -------------------------------------------------------------------

# iterate over options, breaking -ab into -a -b and --foo=bar into --foo bar
# also turns -- into --endopts to avoid issues with things like '-o-', the '-'
# should not indicate the end of options, but be an invalid option (or the
# argument to the option, such as wget -qO-)
unset options
# while the number of arguments is greater than 0
while (($#))
do
  case $1 in
    # if option is of type -ab
    -[!-]?*)
      # loop over each character starting with the second
      for ((i=1; i<${#1}; i++))
      do
        # extract 1 character from position 'i'
        c=${1:i:1}
        # add current char to options
        options+=("-$c")

        # if option takes a required argument, and it's not the last char
        # make the rest of the string its argument
        if [[ $optstring = *"$c:"* && ${1:i+1} ]]
        then
          options+=("${1:i+1}")
          break
        fi
      done
      ;;
    # if option is of type --foo=bar, split on first '='
    --?*=*)
      options+=("${1%%=*}" "${1#*=}")
      ;;
    # end of options, stop breaking them up
    --)
      options+=(--endopts)
      shift
      options+=("$@")
      break
      ;;
    # otherwise, nothing special
    *)
      options+=("$1")
      ;;
  esac

  shift
done
# set new positional parameters to altered options. Set default to blank.
set -- "${options[@]:-}"
unset options

# Parse Options ###############################################################

# Initialize program option variables.
_PRINT_HELP=0
_PRINT_VERSION=0
_USE_DEBUG=0

# Initialize additional expected option variables.
_SUBCOMMAND=
_ARGUMENTS=("$0")

# _require_argument()
#
# Usage:
#  _require_argument "$opt" "$_value_variable"
#
# Checks if an value has been set to the expected variable and, if not, prints
# and error message and exits with status 1.
_require_argument() {
  local option="$1"
  local value="$2"

  if [[ -z "$value" ]]
  then
    _die printf "Option requires an argument: %s\n" "$option"
  fi
}
# getopts and getopts have inconsistent behavior, so using a simple home-brewed
# while loop. This isn't perfectly compliant with POSIX, but it's close enough
# and this appears to be a widely used approach.
#
# More info:
#   http://www.gnu.org/software/libc/manual/html_node/Argument-Syntax.html
#   http://stackoverflow.com/a/14203146
#   http://stackoverflow.com/a/7948533
while [ $# -gt 0 ]
do
  opt="$1"
  shift
  case "$opt" in
    -h|--help)
      if [[ -n "$_SUBCOMMAND" ]]
      then
        _ARGUMENTS+=("$opt")
      else
        _PRINT_HELP=1
      fi
      ;;
    --debug)
      _USE_DEBUG=1
      ;;
    --version)
      if [[ -n "$_SUBCOMMAND" ]]
      then
        _ARGUMENTS+=("$opt")
      else
        _PRINT_VERSION=1
      fi
      ;;
    free|used|explore|graph)
      _SUBCOMMAND="$opt"
      ;;
    --endopts)
      # Terminate option parsing.
      break
      ;;
    *)
      if [[ -z "$_SUBCOMMAND" ]]
      then
        _SUBCOMMAND="$opt"
      else
        _ARGUMENTS+=("$opt")
      fi
      ;;
  esac
done

_debug printf "\$_SUBCOMMAND: %s\n" "$_SUBCOMMAND"
_debug printf "\$_ARGUMENTS: %s\n" "${_ARGUMENTS[*]:-}"

###############################################################################
# Program Functions
###############################################################################

_command_exists() {
  hash "${1:-}" 2>/dev/null
}

_disk() {
  _debug printf "_usage() >> start\n"

  case "$_SUBCOMMAND" in
    "free")
      df -h
      ;;
    "used")
      du -h -d 1 .
      ;;
    "explore")
      if _command_exists "ncdu"
      then
        ncdu
      else
        cat <<EOM
ncdu is not installed. Find it here:
http://dev.yorhel.nl/ncdu
EOM
      fi
      ;;
    "graph")
      if _command_exists "ohmu"
      then
        ohmu
      else
        cat <<EOM
ohmu is not installed. Find it here:
https://github.com/paul-nechifor/ohmu
EOM
      fi
      ;;
    *)
      _print_help
      ;;
  esac
}

###############################################################################
# Main
###############################################################################

_main() {
  if (("$_PRINT_HELP"))
  then
    _print_help
  elif (("$_PRINT_VERSION"))
  then
    _print_version
  else
    _disk "$@"
  fi
}

_main "$@"
