" ============================================================================
" Janus-related vimrc.
"
" Runs after Janus is loaded.
" ============================================================================

" ============================================================================
" colorschemes
"
" Leaving favorites commented out for easy switching
" ============================================================================

"colorscheme base16-chalk
"colorscheme base16-default
"colorscheme base16-flat
"colorscheme base16-google
"colorscheme base16-grayscale
"colorscheme base16-greenscreen
"colorscheme base16-ocean
"colorscheme base16-solarized
"colorscheme tomorrow
"colorscheme eclips3remix
"colorscheme eclm_wombat
"colorscheme darkburn
"colorscheme deepblue
"colorscheme hybrid
"colorscheme seti
"colorscheme vwilight
"colorscheme Tomorrow-Night-Blue
"colorscheme Tomorrow-Night-Eighties
"colorscheme Tomorrow-Night

set background=dark
if has("gui_macvim")
  "colorscheme base16-default
  colorscheme seti
  "colorscheme vwilight
else
  " 'hybrid' is a good default to return to if necessary.
  colorscheme hybrid
endif

" ============================================================================
" Font
" ============================================================================

" SetGuiFont()
"
" Set the GUI font with a font size determined by the screen width.
"
" Fonts must be installed from here:
" https://github.com/abertsch/Menlo-for-Powerline
"
" Depends on (but does not require) cscreen:
" http://www.pyehouse.com/cscreen/
function SetGuiFont()
  let screenwidth = system("cscreen | awk '{print $4}' | head -2 | tail -1")
  if screenwidth > "1919\n"
    set guifont=Menlo\ for\ Powerline:h13
  else
    set guifont=Menlo\ for\ Powerline:h11
  endif
endfunction

call SetGuiFont()

" ============================================================================
" Mouse
" ============================================================================

" Enable mouse in terminal vim
set mouse=a

" ============================================================================
" SH / shell default syntax config
" ============================================================================

" Setting this variable prevents errors from being displayed in sh shell
" scripts. For example, without this setting, $() command substitution is
" displayed as an error, typically with a red background (specified by either
" the Error or ErrorMsg highlight group), because pre-POSIX
" shells only supported the backtick syntax (`..`) which is now discouraged.
" (see: https://github.com/koalaman/shellcheck/wiki/SC2006). With this
" setting, however, the default is set to KornShell (ksh), which is
" POSIX-compliant and supports the $() syntax.
"
" More information:
"
" https://github.com/b4winckler/vim/blob/master/runtime/doc/syntax.txt#L2802
" http://stackoverflow.com/a/5423808
let g:is_posix = 1

" ============================================================================
" GUI options
" ============================================================================

" disable right scrollbar
set guioptions-=r
" disable left scrollbar
set guioptions-=L

" ============================================================================
" FileType settings
" ============================================================================

 " Turn off balloons in ruby.  See:
 "   http://stackoverflow.com/a/1111363
 "   http://vimdoc.sourceforge.net/htmldoc/debugger.html#balloon-eval
if has("gui_running")
  autocmd FileType ruby,eruby set noballooneval
endif

" Ensure indent is on
filetype plugin indent on

" Associate the .es6 file extension with JavaScript
"
" The `.es6` is used by 6to5 (and, by extension, Sprockets) which turns ES6+
" code into ES5.
"
" https://6to5.org/
" https://github.com/josh/sprockets-es6
"
" Setting via:
"   http://robots.thoughtbot.com/replace-coffeescript-with-es6
autocmd BufRead,BufNewFile *.es6 setfiletype javascript

" Associate Baskfile and Manuelfile with bash
"
" Files with these names are expected to be bash files without a shebang since
" they are sourced and run from their respective programs: 'bask' and manuel.
autocmd BufRead,BufNewFile Baskfile,Manuelfile let b:is_bash=1
autocmd BufRead,BufNewFile Baskfile,Manuelfile set filetype=sh
autocmd BufRead,BufNewFile Baskfile,Manuelfile call SetFileTypeSH("bash")

" Associate the .spacemacs dotfile with lisp
"
" Spacemacs is an Emacs advanced Kit focused on Evil, and .spacemacs is a
" configuration file for it.
"
" https://github.com/syl20bnr/spacemacs
autocmd BufRead,BufNewFile .spacemacs setfiletype lisp

" Associate the .sshconfig file extension with the sshconfig file type.
"
" In the current dotfile configuration, .sshconfig files (not an official
" extenssion and only used in this dotfile configuration for convenience) can
" be added to the .ssh/config.d directory and subsequently compiled into one
" larger ssh configuration file.
autocmd BufRead,BufNewFile *.sshconfig set filetype=sshconfig

" Associate .cson files with CoffeeScript.
autocmd BufRead,BufNewFile *.cson set filetype=coffee

" ============================================================================
" Line length highlighting
" ============================================================================

" highlight the 81st column, to limit line length to 80 columns.
"
" Why do we limit to 80 columns? Read on...
"   http://programmers.stackexchange.com/a/148729
"   http://www.emacswiki.org/emacs/EightyColumnRule
"
if has("gui_macvim")
  " Experimental ColorColumn that tweaks the non-GUI version to make the
  " foreground less glaring (to avoid too much noise from newlines) and make
  " the background match the NonText background.
  "
  " last: hi ColorColumn guifg=#bbbbbb guibg=#1a1a1a gui=NONE
  hi ColorColumn guifg=NONE guibg=#1c1d1e gui=bold
else
  hi ColorColumn guifg=#f8f8f8 guibg=#161616 gui=NONE
endif

if exists('+colorcolumn')
  " In Vim >= 7.3, also highlight columns 120+
  "
  " (120-320 because you have to provide an upper bound and 320 just
  "  covers a 1080p GVim window in Ubuntu Mono 11 font.)
  let &colorcolumn="81,".join(range(120,320),",")
else
  " fallback for Vim < v7.3
  autocmd BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>80v.\+', -1)
endif

" ============================================================================
" Cursor Line Highlighting
" ============================================================================

set cursorline

" ============================================================================
" Splits, Tabs, and Buffers
" ============================================================================

" Extra split navigation shortcuts
nmap <C-j> <C-w>j
nmap <C-k> <C-w>k
nmap <C-h> <C-w>h
nmap <C-l> <C-w>l

" More natural split behavior by placing cursor in the bottom or right split
set splitbelow
set splitright

" Buffer cycling mapping
"
" Use ctrl-tab to close the current buffer without closing the split / window
"map <C-Tab> :Kwbd<cr>
map <C-Tab> :BD<cr>

" Use ctrl-[[ and ctrl-]] to cycle buffers
"
" NOTE: because C-[ is the same as escape, this mapping also results in
" <Esc><Esc> inheriting the same behavior. This is also why a single C-[
" doesn't work properly, since it maps a single Esc to buffer cycling, which
" is less desirable.
map <C-[><C-[> :bprevious<cr>
map <C-]><C-]> :bnext<cr>

" alt / option key buffer management mappings.
"
" Specify alt / option key combinations by setting to the character generated
" by the key combination.
if exists(':CtrlSpaceGoUp')
  " vim-ctrlspace mappings.
  "
  " If vim-ctrlspace is installed, the buffer list is in alpha ordering, so
  " :bprevious and :bnext jump all over rather than cycle in the displayed
  " order. Use use vim-ctrlspace commands for better cycling.
  "
  " alt-[
  nnoremap “ :CtrlSpaceGoUp<cr>
  vnoremap “ :CtrlSpaceGoUp<cr>
  " alt-shift-[
  nnoremap ” :CtrlSpaceGoUp<cr>
  vnoremap ” :CtrlSpaceGoUp<cr>
  " alt-]
  nnoremap ‘ :CtrlSpaceGoDown<cr>
  vnoremap ‘ :CtrlSpaceGoDown<cr>
  " alt-shift-]
  nnoremap ’ :CtrlSpaceGoDown<cr>
  vnoremap ’ :CtrlSpaceGoDown<cr>
else
  " alt-[
  nnoremap “ :bprevious<cr>
  vnoremap “ :bprevious<cr>
  " alt-shift-[
  nnoremap ” :bprevious<cr>
  vnoremap ” :bprevious<cr>
  " alt-]
  nnoremap ‘ :bnext<cr>
  vnoremap ‘ :bnext<cr>
  " alt-shift-]
  nnoremap ’ :bnext<cr>
  vnoremap ’ :bnext<cr>
endif
" alt-W
nnoremap ∑ :BD<cr>
vnoremap ∑ :BD<cr>
" alt-shift-W
nnoremap „ :BD<cr>
vnoremap „ :BD<cr>
" alt-n and alt-shift-n
"
" NOTE: Mapping to the character created with alt-shift-N appears to also work
" for alt-N.
nnoremap ˜ :enew<cr>
vnoremap ˜ :enew<cr>

" ============================================================================
" Fullscreen
" ============================================================================

" Cmd-Enter: Toggle Fullscreen
nmap <d-cr> :set invfu<cr>
vmap <d-cr> <Esc>:set invfu<cr>gv

" ============================================================================
" Navigation and Selection
" ============================================================================

" Enable custom HIG movement and selection settings when running MacVim
"
" Custom mapping location:
"   .gvimrc.after
" Original system mappings:
"   https://github.com/b4winckler/macvim/blob/master/src/MacVim/gvimrc
"
if has("gui_macvim")
  " Disable MacVim system default mappings
  let macvim_skip_cmd_opt_movement = 1

  " Enable custom MacVim HIG movement mappings.
  let custom_macvim_hig_movement = 1

  " If the above custom setting disabled, fall back to the MacVim
  " defaults.
  if !exists("custom_macvim_hig_movement")
    " Reenable MacVim system default mappings
    unlet macvim_skip_cmd_opt_movement
    let macvim_hig_shift_movement = 1
  endif
endif

" Fix arrow keys in normal and visual modes in terminal vim.
"
" More information:
" http://vim.wikia.com/wiki/Fix_arrow_keys_that_display_A_B_C_D_on_remote_shell
nmap <ESC>oA <ESC>ki
nmap <ESC>oB <ESC>ji
nmap <ESC>oC <ESC>li
nmap <ESC>oD <ESC>hi

vmap <ESC>oA <ESC>ki
vmap <ESC>oB <ESC>ji
vmap <ESC>oC <ESC>li
vmap <ESC>oD <ESC>hi

" ============================================================================
" CtrlP
" ============================================================================

" Use abbreviation for CtrlP/Command-T cache refresh
:ca rc ClearCtrlPCache
" Include hidden files
let g:ctrlp_show_hidden = 1

" Ignore local glyph directory in project since it slows down cache building.
"
" TODO: remove when this directory no longer exists locally.
set wildignore+=*system/development/glyphs*

" ============================================================================
" tagbar
" ============================================================================

" Toggle tagbar shortcut
nmap <leader>ttb :TagbarToggle<CR>

" Map <leader>m to tagbar to mirror current Atom minimap toggle mapping.
nmap <leader>m :TagbarToggle<CR>

" Set default tagbar width
"
" With a 1680 px width screen, tagbar fits better with NERDTree and two splits
" when it's narrower.
"
" Default = 40
let g:tagbar_width = 30

" ============================================================================
" vim-gitgutter
" ============================================================================

let g:gitgutter_diff_base = 'HEAD'

" ============================================================================
" NERDTree
" ============================================================================

" Show NERDTree hidden files
let NERDTreeShowHidden = 1

" Only automatically open NERDTree in Macvim.
"
" The corresponding NERDTree initialization that's being disabled here can be
" found at .vim/janus/vim/tools/janus/after/plugin/nerdtree.vim#7:9
if !has("gui_macvim")
  augroup AuNERDTreeCmd
    autocmd!
  augroup end
endif

" Set to use single mouse click to open node or file.
let g:NERDTreeMouseMode = 3

" Configure NERDTreeIgnore
"
" Ignore .DS_Store
call add(g:NERDTreeIgnore, '\.DS_Store$')

" ============================================================================
" Neomake
" ============================================================================

" Set Ruby file type to only use rubocop and mri
"
" rubylint returns undesirable warnings, so exclude from list.
let g:neomake_ruby_enabled_makers = ['rubocop', 'mri']

" Run Neomake on every file write.
autocmd! BufWritePost * Neomake

" Better gutter symbol and highlighting.
"
" More information:
"   https://github.com/neomake/neomake/blob/master/doc/neomake.txt#L305
let g:neomake_warning_sign = {
  \   'text': '›',
  \   'texthl': 'NeomakeWarningSign',
  \ }

" ============================================================================
" vim-json
" ============================================================================

" Disable quote concealing
"
" Quote concealing is a little disorienting, so disable it.
let g:vim_json_syntax_conceal = 0

" ============================================================================
" vim-pandoc
" ============================================================================

" Disable folding.
let g:pandoc#modules#disabled = ["folding"]

" ============================================================================
" vim-pandoc-syntax
" ============================================================================

" Disable conceal for code blocks and inline code, which can be disorienting
" in documents that include a lot of code.
let g:pandoc#syntax#conceal#blacklist = [
      \"codeblock_delim",
      \"codeblock_start",
      \"inlinecode"
      \]

" ============================================================================
" search
" ============================================================================

" Remap control-esc in normal mode to clear search highlights.
nnoremap <C-esc> :noh<return><esc>

" ============================================================================
" ESC / Ctrl-C / Ctrl-[
" ============================================================================

" Make C-c trigger the InsertLeave autocommand and otherwise behave
" identically to C-[ and Esc
"
" http://stackoverflow.com/a/80761
" http://vimdoc.sourceforge.net/htmldoc/insert.html#i_CTRL-C
inoremap <C-c> <Esc><Esc>

" ============================================================================
" run file
" ============================================================================

" When in MacVim, use control-R to save and run the current file.
if has("gui_macvim")
  map <C-r> :w<CR>:!./%<CR>
endif

" ============================================================================
" Profiler and debugging.
" ============================================================================

" Mappings for running profile
"
" source: https://github.com/bling/minivimrc/
nnoremap <silent> <leader>DD :exe ":profile start profile.log"<cr>:exe ":profile func *"<cr>:exe ":profile file *"<cr>
nnoremap <silent> <leader>DP :exe ":profile pause"<cr>
nnoremap <silent> <leader>DC :exe ":profile continue"<cr>
nnoremap <silent> <leader>DQ :exe ":profile pause"<cr>:noautocmd qall!<cr>

" ============================================================================
" showcmd
" ============================================================================

" Show (partial) command in the last line of the screen.  Set this
" option off if your terminal is slow.
" In Visual mode the size of the selected area is shown:
" - When selecting characters within a line, the number of characters.
"   If the number of bytes is different it is also displayed: '2-6'
"  means two characters and six bytes.
" - When selecting more than one line, the number of lines.
" - When selecting a block, the size in screen characters:
"   {lines}x{columns}.
"
" This option is also notably useful for displaying the timeout for the leader
" key.
set showcmd

" ============================================================================
" tab
" ============================================================================

" Use shift-tab to enter a tab character.
"
" More information:
" http://stackoverflow.com/a/4781099
inoremap <S-Tab> <C-V><Tab>

" ============================================================================
" cursor
" ============================================================================

" Set blink rate.
set guicursor=n:blinkwait1400-blinkon800-blinkoff500
set guicursor=v:blinkwait1400-blinkon800-blinkoff500
