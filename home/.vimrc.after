" Janus-related vimrc.
"
" Runs after Janus is loaded.

" ============================================================================
" colorschemes
"
" Leaving favorites commented out for easy switching
" ============================================================================

"colorscheme base16-chalk
"colorscheme base16-default
"colorscheme base16-flat
"colorscheme base16-google
"colorscheme base16-grayscale
"colorscheme base16-greenscreen
"colorscheme base16-ocean
"colorscheme base16-solarized
"colorscheme tomorrow
"colorscheme eclips3remix
"colorscheme eclm_wombat
"colorscheme darkburn
"colorscheme deepblue
"colorscheme hybrid
"colorscheme vwilight
"colorscheme Tomorrow-Night-Blue
"colorscheme Tomorrow-Night-Eighties
"colorscheme Tomorrow-Night

if has("gui_macvim")
  colorscheme vwilight
else
  colorscheme hybrid
endif

" ============================================================================
" Font
" ============================================================================

" Note - fonts must be installed from here:
" https://github.com/abertsch/Menlo-for-Powerline
set guifont=Menlo\ for\ Powerline:h11

" ============================================================================
" Mouse
" ============================================================================

" Enable mouse in terminal vim
set mouse=a


" ============================================================================
" GUI options
" ============================================================================

" disable left scrollbar
set guioptions-=L


" ============================================================================
" FileType settings
" ============================================================================

 " Turn off balloons in ruby.  See http://stackoverflow.com/a/1111363
if has("gui_running")
  autocmd FileType ruby,eruby set noballooneval
endif

" autocmd FileType go setlocal ts=4 sts=4 sw=4 noexpandtab

" Ensure indent is on
filetype plugin indent on

" ============================================================================
" Line length highlighting
" ============================================================================

" highlight the 80th column
"
" In Vim >= 7.3, also highlight columns 120+

" Better grey ColorColumn for some themes
hi ColorColumn guifg=#f8f8f8 guibg=#161616 gui=NONE

if exists('+colorcolumn')
  " (I picked 120-320 because you have to provide an upper bound and 320 just
  "  covers a 1080p GVim window in Ubuntu Mono 11 font.)
  let &colorcolumn="80,".join(range(120,320),",")
else
  " fallback for Vim < v7.3
  autocmd BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>80v.\+', -1)
endif


" ============================================================================
" Splits, Tabs, and Buffers
" ============================================================================


" Extra split navigation shortcuts
nmap <C-j> <C-w>j
nmap <C-k> <C-w>k
nmap <C-h> <C-w>h
nmap <C-l> <C-w>l

" More natural split behavior by placing cursor in the bottom or right split
set splitbelow
set splitright

" Buffer cycling mapping
"
" Use ctrl-tab to close the current buffer without closing the split / window
"map <C-Tab> :Kwbd<cr>
map <C-Tab> :BD<cr>

" Use ctrl-[[ and ctrl-]] to cycle buffers
"
" NOTE: because C-[ is the same as escape, this mapping also results in
" <Esc><Esc> inheriting the same behavior. This is also why a single C-[
" doesn't work properly, since it maps a single Esc to buffer cycling, which
" is less desirable.
map <C-[><C-[> :bprevious<cr>
map <C-]><C-]> :bnext<cr>

" ============================================================================
" Fullscreen
" ============================================================================

" Cmd-Enter: Toggle Fullscreen
nmap <d-cr> :set invfu<cr>
vmap <d-cr> <Esc>:set invfu<cr>gv

" ============================================================================
" Navigation and Selection
" ============================================================================

" Enable HIG shift movement related settings when running MacVim
"
" MacVim default mappings can be found in the default gvimrc:
"
" https://github.com/b4winckler/macvim/blob/master/src/MacVim/gvimrc
if has("gui_macvim")
  let macvim_hig_shift_movement = 1

  " Use Visual mode rather than Select mode for MacVim HIG shift mappings
  "
  " NOTE - Right arrow movement has additional overrides set below.
  "
  " #########################
  " Command-Shift-Left Arrow
  " #########################
  "
  nn   <S-D-Left>     v0
  vn   <S-D-Left>     0
  ino  <S-D-Left>     <C-O>v0
  "
  " #########################
  " Option-Shift-Left Arrow
  " #########################
  "
  nn   <S-M-Left>     vb
  vn   <S-M-Left>     b
  ino  <S-M-Left>     <C-O>vb
  "
  " #########################
  " Command-Shift-Up Arrow
  " #########################
  "
  nn   <S-D-Up>       vgg
  vn   <S-D-Up>       gg
  ino  <S-D-Up>       <C-O>vgg
  "
  " #########################
  " Command-Shift-Down Arrow
  " #########################
  "
  nn   <S-D-Down>     vG
  vn   <S-D-Down>     G
  ino  <S-D-Down>     <C-O>vG
  "
  " ------------------------------------
  " Override MacVim right arrow movement
  " ------------------------------------
  "
  " MacVim right arrow movement seems to deviate from expected default OS X
  " cursor movement.
  "
  " Also using visual mode as above.
  "
  " #########################
  " Command-Shift-Right Arrow
  " #########################
  "
  " These mappings:
  "   Enter visual mode and select rest of line without newline.
  "
  " Overrides MacVim Default mappings:
  "   Enter select mode and select to end of line with newline.
  "
  nn   <S-D-Right>    vg_
  vn   <S-D-Right>    g_
  ino  <S-D-Right>    <C-O>vg_
  "
  " ########################
  " Option-Shift-Right Arrow
  " ########################
  "
  " These mappings:
  "   Enter visual mode and select to end of current word.
  "
  " Overrides MacVim Default mappings:
  "   Enter select mode and select to beginning of next word.
  "
  nn   <S-M-Right>    ve
  vn   <S-M-Right>    e
  ino  <S-M-Right>    <C-O>ve
  "
  if !exists("macvim_skip_cmd_opt_movement")
    " ##################
    " Option-Right Arrow
    " ##################
    "
    " These mappings:
    "   Move to end of current word.
    "
    " Overrides MacVim default mappings:
    "   Move to beginning of next word.
    no   <M-Right>      e
    no!  <M-Right>      e
    ino  <M-Right>      <C-O>e<Right>
  endif
endif

" Fix arrow keys in normal and visual modes in terminal vim.
"
" More information:
" http://vim.wikia.com/wiki/Fix_arrow_keys_that_display_A_B_C_D_on_remote_shell
nmap <ESC>oA <ESC>ki
nmap <ESC>oB <ESC>ji
nmap <ESC>oC <ESC>li
nmap <ESC>oD <ESC>hi

vmap <ESC>oA <ESC>ki
vmap <ESC>oB <ESC>ji
vmap <ESC>oC <ESC>li
vmap <ESC>oD <ESC>hi


" ============================================================================
" CtrlP
" ============================================================================

" Use abbreviation for CtrlP/Command-T cache refresh
:ca rc ClearCtrlPCache
" Include hidden files
let g:ctrlp_show_hidden = 1

" ============================================================================
" tagbar
" ============================================================================

" Toggle tagbar shortcut
nmap <leader>ttb :TagbarToggle<CR>

" ============================================================================
" NERDTree
" ============================================================================

" Show NERDTree hidden files
let NERDTreeShowHidden = 1

" Only automatically open NERDTree in Macvim.
"
" The corresponding NERDTree initialization that's being disabled here can be
" found at .vim/janus/vim/toools/janus/after/plugin/nerdtree.vim#7:9
if !has("gui_macvim")
  augroup AuNERDTreeCmd
    autocmd!
  augroup end
endif

" ============================================================================
" search
" ============================================================================

" Remap control-esc in normal mode to clear search highlights.
nnoremap <C-esc> :noh<return><esc>

" ============================================================================
" ESC / Ctrl-C / Ctrl-[
" ============================================================================

" Make C-c trigger the InsertLeave autocommand and otherwise behave
" identically to C-[ and Esc
"
" http://stackoverflow.com/a/80761
" http://vimdoc.sourceforge.net/htmldoc/insert.html#i_CTRL-C
inoremap <C-c> <Esc><Esc>
