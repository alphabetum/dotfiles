#!/usr/bin/env bash
###############################################################################
# .shared_env
#
# Settings for both .zshenv and .bashenv
#
# Used by both non-interactive and interactive instances.
#
# In order to keep both shells as similar as possible, all env settings are
# included in this shared_env.
#
# NOTE: source this first when using.
###############################################################################

###############################################################################
# Verbose Init
###############################################################################

# https://github.com/koalaman/shellcheck/wiki/SC1090
# shellcheck source=/dev/null
. "${HOME}/.shared_verbose_init"
__verbose_init printf "Loading .shared_env\n"

###############################################################################
# Utility Functions
#
# Note: these functions must be included prior to the .profile.d or .bashrc.d
# files that use them.
###############################################################################

# reload()
#
# Usage:
#   reload
#
# Description:
#   Reload the shell (i.e. invoke as a login shell).
reload() {
  exec "${SHELL}" -l
}

# OS Tests
###############################################################################

# is_macos()
#
# Usage:
#   is_macos
#
# Returns:
#   0  If current OS is darwin.
#   1  If not.
is_macos() {
  [[ "${OSTYPE}" =~ ^darwin ]]
}

# is_osx()
#
# Usage:
#   is_osx
#
# Returns:
#   0  If current OS is darwin.
#   1  If not.
is_osx() {
  [[ "${OSTYPE}" =~ ^darwin ]]
}

# is_mavericks()
#
# Usage:
#   is_mavericks
#
# Returns:
#   0  If current OS is OS X 10.9 Mavericks.
#   1  If not.
is_mavericks() {
  ___osx_version="$(sw_vers -productVersion | awk -F. '{print $2}')"
  [ "${___osx_version}" -eq "9" ]
}

# is_yosemite()
#
# Usage:
#   is_yosemite
#
# Returns:
#   0  If current OS is OS X 10.10 Yosemite.
#   1  If not.
is_yosemite() {
  ___osx_version="$(sw_vers -productVersion | awk -F. '{print $2}')"
  [ "${___osx_version}" -eq "10" ]
}

# is_el_capitan()
#
# Usage:
#   is_el_capitan
#
# Returns:
#   0  If current OS is OS X 10.11 El Capitan.
#   1  If not.
is_el_capitan() {
  ___osx_version="$(sw_vers -productVersion | awk -F. '{print $2}')"
  [ "${___osx_version}" -eq "11" ]
}

# is_sierra()
#
# Usage:
#   is_sierra
#
# Returns:
#   0  If current OS is macOS 10.12 Sierra.
#   1  If not.
is_sierra() {
  ___osx_version="$(sw_vers -productVersion | awk -F. '{print $2}')"
  [ "${___osx_version}" -eq "12" ]
}

# is_linux()
#
# Usage:
#   is_linux
#
# Returns:
#   0  If current OS is linux.
#   1  If not.
is_linux() {
  [[ "$(uname -a)" =~ ^Linux ]]
}

# is_ubuntu()
#
# Usage:
#   is_ubuntu
#
# Returns:
#   0  If current OS is Ubuntu.
#   1  If not.
is_ubuntu() {
  [[ "$(cat /etc/issue 2> /dev/null)" =~ Ubuntu ]]
}

# get_os()
#
# Usage:
#   get_os
#
# Description:
#   Print one of 'osx', 'ubuntu', or 'linux' identifying the current system.
get_os() {
  for ___os in osx ubuntu linux
  do
    if "is_${___os}"
    then
      printf "%s\n" "${___os}"
      return 0
    fi
  done
}

# Shell Tests
###############################################################################

# is_zsh()
#
# Usage:
#   is_zsh
#
# Returns:
#   0  If current shell is Zsh.
#   1  If not.
is_zsh() {
  [ -n "${ZSH_NAME}" ]
}

# is_bash()
#
# Usage:
#   is_bash
#
# Returns:
#   0  If current shell is Bash.
#   1  If not.
is_bash() {
  [ -n "${BASH}" ]
}

# Command Test
###############################################################################

# command_exists()
#
# Usage:
#   command_exists "name"
#
# Description:
#   If the given command name exists, return 0, otherwise return 1.
#
#   For information on why `which` is not being used, see:
#   http://stackoverflow.com/a/677212
command_exists() {
  hash "${1}" 2>/dev/null
}
# For compatibiity, alias this function's previous name, `program_exists`.
alias program_exists="command_exists"

# source_dir
###############################################################################

# source_dir()
#
# Usage:
#   source_dir <path/to/directory>
#
# Description:
#   Source each of the files in a given directory.
source_dir() {
  if (($#)) && [ -d "${1}" ]
  then
    for ___file in "${1}"/*
    do
      if [ -f "${___file}" ]
      then
        # https://github.com/koalaman/shellcheck/wiki/SC1090
        # shellcheck source=/dev/null
        source "${___file}"
      fi
    done
  else
    printf "Usage: source_dir <path/to/directory>\n"
    return 1
  fi
}

###############################################################################
# Debug
###############################################################################

# Set `$_DEBUG_ENABLED` is it's blank.
if [[ -z "${_DEBUG_ENABLED:-}" ]]
then
  export _DEBUG_ENABLED=0
fi

debug() {
  _print_debug_help() {
    cat <<HEREDOC
Usage:
  debug ( on | off | status )
  debug -h | --help

Options:
  -h --help  Show this help.

Description:
  Turn debug mode on or off.
HEREDOC
  }

  for ___arg in "${@:-}"
  do
    case "${___arg}" in
      on)
        _DEBUG_ENABLED=1
        debug status
        ;;
      off)
        _DEBUG_ENABLED=0
        debug status
        ;;
      status)
        if ((_DEBUG_ENABLED))
        then
          printf "on\n"
        else
          printf "off\n"
        fi
        ;;
      -h|--help)
        _print_debug_help
        return 0
        ;;
      *)
        _print_debug_help
        return 1
        ;;
    esac
  done
}

# _debug()
#
# Usage:
#   _debug printf "Debug info. Variable: %s\n" "$0"
#
# A simple function for executing a specified command if the `$_DEBUG_ENABLED`
# variable has been set. The command is expected to print a message and
# should typically be either `echo`, `printf`, or `cat`.
_debug() {
  if [[ "${_DEBUG_ENABLED:-"0"}" -eq 1 ]]
  then
    # Prefix debug message with "bug (U+1F41B)"
    printf "🐛  "
    "$@"
    printf "――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――\n"
  fi
}

###############################################################################
# Init
###############################################################################

# Add $HOME/bin to $PATH
#
# Prepend `$HOME/bin` to `$PATH` at beginning of initialization so its
# executables are available.
export PATH="${HOME}/bin:${PATH}"

# $DOTFILES
#
# Set $DOTFILES directory using the `bindle` tool if present.
export DOTFILES
if command_exists "bindle"
then
  DOTFILES="$(bindle dir)"
else
  DOTFILES="${HOME}/.dotfiles"
fi

# .shared_env.d
#
# Source all files in ".shared_env.d" if present.
if [ -d "${HOME}/.shared_env.d" ]
then
  source_dir "${HOME}/.shared_env.d"
fi

# .shared_env.local
#
# load shared_env.local if it exists
if [ -f "${HOME}/.shared_env.local" ]
then
  # https://github.com/koalaman/shellcheck/wiki/SC1090
  # shellcheck source=~/.shard_env.local
  source "${HOME}/.shared_env.local"
fi

# Re-add $HOME/bin to $PATH
#
# Other paths are prepended to `$PATH` during shared_env initialization,
# placing `$HOME/bin` further down the chain. `$HOME/bin` is intended to be at
# the beginning of `$PATH` so the executables it contains have the highest
# precedence. Therefore, it must be re-prepended after the shared environment
# initialization process has been completed.
export PATH="${HOME}/bin:${PATH}"

# Add $DOTFILES/bin to $PATH
#
# Include executables from the dotfiles directory.
export PATH="${DOTFILES}/bin:${PATH}"

# SHARED_ENV_LOADED
#
# Available to other files in the initialization process to use in order to
# determine whether this shared environment has been loaded.
#
# This variable *should not be exported*, since subshells need to be able to
# run through the initialization process themselves, and this variable would
# prevent that.
#
# Disable ShellCheck "___ appears unused. Verify it or export it." warning:
# shellcheck disable=SC2034
SHARED_ENV_LOADED=true
