###############################################################################
# .shared_env
#
# Settings for both .zshenv and .bashenv
#
# Used by both non-interactive and interactive instances.
#
# In order to keep both shells as similar as possible, all env settings are
# included in this shared_env.
#
# NOTE: source this first when using.
###############################################################################

###############################################################################
# Utility Functions
#
# Note: these functions must be included prior to the .profile.d or .bashrc.d
# files that use them.
###############################################################################

# OS detection
is_osx() {
  [[ "$OSTYPE" =~ ^darwin ]] || return 1
}
is_ubuntu() {
  [[ "$(cat /etc/issue 2> /dev/null)" =~ Ubuntu ]] || return 1
}
get_os() {
  for os in osx ubuntu; do
    is_$os; [[ $? == ${1:-0} ]] && echo $os
  done
}

# Check whether a program exists in the PATH
#
# For information on why `which` is not being used, see:
# http://stackoverflow.com/a/677212
program_exists() {
  hash $1 2>/dev/null
}

test_program_exists() {
  if ! program_exists not_a_real_program ; then
    echo "test_program_exists Passed"
  fi
  if program_exists bash ; then
    echo "test_program_exists Passed"
  fi

}

# source all files in a directory, or optionally source one file from a
# specified directory.
init_src() {
  local file
  if [ -n "$2" ]; then
    source "$HOME/$1/$2"
  elif [ -n "$1" ]; then
    for file in $HOME/$1/*; do
      source "$file"
    done
  else
    echo "Please specify directory to be sourced."
    return 1
  fi
}

###############################################################################
# Init
###############################################################################

# Set DOTFILES directory
if program_exists "bindle"; then
  export DOTFILES="$(bindle dir)"
else
  export DOTFILES="$HOME/.dotfiles"
fi

# Source all files in ".shared_env.d"
init_src .shared_env.d

# load shared_env.local if it exists
if [ -f $HOME/.shared_env.local ]; then
  source $HOME/.shared_env.local
fi


SHARED_ENV_LOADED=true

