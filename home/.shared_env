#!/usr/bin/env bash
###############################################################################
# .shared_env
#
# Settings for both .zshenv and .bashenv
#
# Used by both non-interactive and interactive instances.
#
# In order to keep both shells as similar as possible, all env settings are
# included in this shared_env.
#
# NOTE: source this first when using.
###############################################################################

###############################################################################
# Verbose Init
###############################################################################

. "$HOME/.shared_verbose_init"
__verbose_init printf "Loading .shared_env\n"

###############################################################################
# Utility Functions
#
# Note: these functions must be included prior to the .profile.d or .bashrc.d
# files that use them.
###############################################################################

# OS Tests
###############################################################################
is_osx() {
  [[ "$OSTYPE" =~ ^darwin ]] || return 1
}
is_mavericks() {
  ___osx_version="$(sw_vers -productVersion | awk -F. '{print $2}')"
  [ "$___osx_version" -eq "9" ]
}
is_yosemite() {
  ___osx_version="$(sw_vers -productVersion | awk -F. '{print $2}')"
  [ "$___osx_version" -eq "10" ]
}
is_el_capitan() {
  ___osx_version="$(sw_vers -productVersion | awk -F. '{print $2}')"
  [ "$___osx_version" -eq "11" ]
}
is_linux() {
  [[ "$(uname -a)" =~ ^Linux ]] || return 1
}
is_ubuntu() {
  [[ "$(cat /etc/issue 2> /dev/null)" =~ Ubuntu ]] || return 1
}
get_os() {
  for os in osx ubuntu
  do
    is_$os; [[ $? == "${1:-0}" ]] && echo $os
  done
}

# Shell Tests
###############################################################################

is_zsh() {
  [ -n "$ZSH_NAME" ]
}

is_bash() {
  [ -n "$BASH" ]
}

# Command Test
###############################################################################

# command_exists()
#
# Usage:
#   command_exists "name"
#
# Description:
#   If the given command name exists, return 0, otherwise return 1.
#
#   For information on why `which` is not being used, see:
#   http://stackoverflow.com/a/677212
command_exists() {
  hash "$1" 2>/dev/null
}
# For compatibiity, alias this function's previous name, `program_exists`.
alias program_exists="command_exists"

# test_command_exists()
#
# Usage:
#   test_command_exists
#
# Description:
#   Run a simple test for `command_exists`.
test_command_exists() {
  if ! command_exists "not_a_real_command"
  then
    echo "test_command_exists Passed"
  fi
  if command_exists "bash"
  then
    echo "test_command_exists Passed"
  fi
}

# init_src
###############################################################################

# init_src()
#
# Usage:
#   init_src <path/to/directory> [<filename>]
#
# Description:
#   Source all files in a directory, or optionally source one file from a
#   specified directory.
init_src() {
  local file
  if [ -n "$2" ]
  then
    source "$HOME/$1/$2"
  elif [ -n "$1" ]
  then
    for file in "$HOME/$1"/*
    do
      if [ -f "$file" ]
      then
        source "$file"
      fi
    done
  else
    echo "Please specify directory to be sourced."
    return 1
  fi
}

###############################################################################
# Init
###############################################################################

# Set DOTFILES directory
export DOTFILES
if program_exists "bindle"
then
  DOTFILES="$(bindle dir)"
else
  DOTFILES="$HOME/.dotfiles"
fi

# Source all files in ".shared_env.d" if present.
if [ -d "$HOME/.shared_env.d" ]
then
  init_src .shared_env.d
fi

# load shared_env.local if it exists
if [ -f "$HOME/.shared_env.local" ]
then
  source "$HOME/.shared_env.local"
fi

# Add $HOME/bin to $PATH
#
# $HOME/bin contains overrides for executables elsewhere in the $PATH, so
# place it in the top position after everything else has loaded..
export PATH=$HOME/bin:$PATH

# SHARED_ENV_LOADED
#
# Available to other files in the initialization process to use in order to
# determine whether this shared environment has been loaded.
#
# This variable *should not be exported*, since subshells need to be able to
# run through the initialization process themselves, and this variable would
# prevent that.
#
# Disable ShellCheck "___ appears unused. Verify it or export it." warning:
# shellcheck disable=SC2034
SHARED_ENV_LOADED=true
