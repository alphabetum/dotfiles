#!/usr/bin/env bash
###############################################################################
# .shared_env
#
# Settings for both .zshenv and .bashenv
#
# Used by both non-interactive and interactive instances.
#
# In order to keep both shells as similar as possible, all env settings are
# included in this shared_env.
#
# NOTE: source this first when using.
###############################################################################

###############################################################################
# Verbose Init
###############################################################################

. "$HOME/.shared_verbose_init"
__verbose_init printf "Loading .shared_env\n"

###############################################################################
# Utility Functions
#
# Note: these functions must be included prior to the .profile.d or .bashrc.d
# files that use them.
###############################################################################

# OS detection
is_osx() {
  [[ "$OSTYPE" =~ ^darwin ]] || return 1
}
is_linux() {
  [[ "$(uname -a)" =~ ^Linux ]] || return 1
}
is_ubuntu() {
  [[ "$(cat /etc/issue 2> /dev/null)" =~ Ubuntu ]] || return 1
}
get_os() {
  for os in osx ubuntu
  do
    is_$os; [[ $? == "${1:-0}" ]] && echo $os
  done
}

# Check whether a program exists in the PATH
#
# For information on why `which` is not being used, see:
# http://stackoverflow.com/a/677212
program_exists() {
  hash "$1" 2>/dev/null
}

test_program_exists() {
  if ! program_exists "not_a_real_program"
  then
    echo "test_program_exists Passed"
  fi
  if program_exists "bash"
  then
    echo "test_program_exists Passed"
  fi

}

# source all files in a directory, or optionally source one file from a
# specified directory.
init_src() {
  local file
  if [ -n "$2" ]
  then
    source "$HOME/$1/$2"
  elif [ -n "$1" ]
  then
    for file in "$HOME/$1"/*
    do
      if [ -f "$file" ]
      then
        source "$file"
      fi
    done
  else
    echo "Please specify directory to be sourced."
    return 1
  fi
}

###############################################################################
# Init
###############################################################################

# Set DOTFILES directory
if program_exists "bindle"
then
  export DOTFILES="$(bindle dir)"
else
  export DOTFILES="$HOME/.dotfiles"
fi

# Source all files in ".shared_env.d" if present.
if [ -d "$HOME/.shared_env.d" ]
then
  init_src .shared_env.d
fi

# load shared_env.local if it exists
if [ -f "$HOME/.shared_env.local" ]
then
  source "$HOME/.shared_env.local"
fi

# Add $HOME/bin to $PATH
#
# $HOME/bin contains overrides for executables elsewhere in the $PATH, so
# place it in the top position after everything else has loaded..
export PATH=$HOME/bin:$PATH

export SHARED_ENV_LOADED=true
