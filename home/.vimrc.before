" ============================================================================
" Janus-related vimrc.
"
" Runs before Janus is loaded.
" ============================================================================

" ============================================================================
" Leader
" ============================================================================

" change the leader from backslash (\) to comma (,)
let mapleader=","

" ============================================================================
" Disable Janus plugins
" ============================================================================

" Example disable call:
"
" call janus#disable_plugin('<plugin_name>')

" Candidates for disabling
"
" These are currently not being used and can be disabled without problems:
"
"call janus#disable_plugin('buffergator')
"call janus#disable_plugin('dispatch')
"call janus#disable_plugin('fugitive')
"call janus#disable_plugin('gist')
"call janus#disable_plugin('gundo')
"call janus#disable_plugin('narrowregion')
"call janus#disable_plugin('vimwiki')
"call janus#disable_plugin('vroom')

" Disable syntastic in favor of non-janus installation to better ensure that
" it's up to date.
call janus#disable_plugin('syntastic')

" Disable Janus-installed gitgutter
"
" vim-signify is preferred over vim-gitgutter.
call janus#disable_plugin('gitgutter')

" ============================================================================
" Disable Pathogen plugins
" ============================================================================

" To disable a plugin, add its bundle name to the following list
let g:pathogen_disabled = []

" Example disable call:
"
" call add(g:pathogen_disabled, '<plugin_name>')

" ============================================================================
" vim-airline
"
" Must be in .vimrc.before or tabline doesn't display.
" ============================================================================

" enable tabline
let g:airline#extensions#tabline#enabled = 1

" Use powerline styling
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
let g:airline_powerline_fonts = 1
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ''

" ============================================================================
" vim-signify
" ============================================================================

" Only use signify for git
"
" This reduces the number of calls and improves performance.
let g:signify_vcs_list = [ 'git' ]

" Display all changes since last commit, even those that are staged to index.
let g:signify_diffoptions = { 'git': 'HEAD' }

" MacVim refresh settings.
"
" Because refrishing causing a long pause, only refresh vim-signify in MacVim
" on demand.
"
" Update signify (ie, run :SignifyRefresh) when vim regains focus.
if ! has("gui_macvim")
  let g:signify_update_on_focusgained = 1
endif
" Map command-R to :SignifyRefresh in MacVim
if has("gui_macvim")
  map <D-r> :SignifyRefresh<CR>
endif
