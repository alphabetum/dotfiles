" ============================================================================
" Janus-related vimrc.
"
" Runs before Janus is loaded.
"
" NOTE: Slow plugins:
" - TagBar
"   - Calling ctags is slow, particularly the initial calls for a buffer.
" - Syntastic
"   - Does not have an async option at this time. Consider Neomake instead.
" - NERDTree
" ============================================================================

" ============================================================================
" Base Vim Settings
" ============================================================================

" set nocompatible and hidden
"
" Required by plugins like vim-ctrlspace
set nocompatible
set hidden

" ============================================================================
" Leader
" ============================================================================

" change the leader from backslash (\) to comma (,)
let mapleader=","

" ============================================================================
" Disable Pathogen plugins
"
" NOTE: This section must come before `janus#disable_plugin` is called since
" it apparently uses the `g:pathogen_disabled` variable..
" ============================================================================

" To disable a plugin, add its bundle name to the following list
let g:pathogen_disabled = []

" Example disable call:
"
" call add(g:pathogen_disabled, '<plugin_name>')

" NOTE: Temporarily experiment with vim-gitgutter in place of vim-signify.
call add(g:pathogen_disabled, 'vim-signify')

" Disable syntastic.override to completely disable syntastic.
"
" Syntastic can be very slow and is not async, so experiement with Neomake
" instead. More information:
" https://github.com/vim-syntastic/syntastic/issues/699
call add(g:pathogen_disabled, 'syntastic.override')


" ============================================================================
" Disable Janus plugins
" ============================================================================

" Example disable call:
"
" call janus#disable_plugin('<plugin_name>')

" Candidates for disabling
"
" These are currently not being used and can be disabled without problems:
"
"call janus#disable_plugin('buffergator')
"call janus#disable_plugin('dispatch')
"call janus#disable_plugin('fugitive')
"call janus#disable_plugin('gist')
"call janus#disable_plugin('gundo')
"call janus#disable_plugin('narrowregion')
"call janus#disable_plugin('vimwiki')
"call janus#disable_plugin('vroom')

" Disable syntastic in favor of non-janus installation to better ensure that
" it's up to date.
"
" NOTE: Janus plugins can't be disabled and overridden by a plugin with the
" same name. Disabling the janus plugin also disables manually-installed
" plugins in .janus. If the janus plugin is not disabled, then the plugin
" is loaded twice, with the plugin in the .janus folder being loaded after
" the one in the janus distribution.
"
" According to the customization wiki, plugins can override the janus
" distribution plugins by being added to .janus.before, but so far I've
" been unable to get this to work. For more information see:
"
" https://github.com/carlhuda/janus/wiki/Customization#adding-a-new-plugin-color-scheme-
"
" In order to override it within the .janus folder, rename the syntastic
" submodule to syntastic.overrride and retain the disabling of the
" traditionally-named syntastic in the janus distribution.
call janus#disable_plugin('syntastic')

" Disable tagbar.
"
" Tagbar causes an extreme slowdown on my system on each write due to running
" ctags calls.
call janus#disable_plugin('tagbar')

" Disable Janus-installed gitgutter
"
" vim-signify is preferred over vim-gitgutter.
"
" NOTE: Temporarily experiment with vim-gitgutter in place of vim-signify.
" call janus#disable_plugin('vim-gitgutter')

" ============================================================================
" vim-airline
"
" Must be in .vimrc.before or tabline doesn't display.
" ============================================================================

" enable tabline
let g:airline#extensions#tabline#enabled = 1

" Use powerline styling
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
let g:airline_powerline_fonts = 1
" ---
" Try with straight separators on tab / buffer side.
" let g:airline_left_sep = ''
" let g:airline_left_alt_sep = ''
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
" ---
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ''

" Use minimal set of vim-airline extensions for some files.
"
" vim-airline extensions can cause startup to be very slow, so only load
" a minimal set of extensions for file types that are frequently opened
" and closed.
"
" TODO: Determine which extensions have the most impace on performance
" and disable them in more, if not all, cases.
if expand('%:t:r') == 'COMMIT_EDITMSG' || expand('%:e') == 'md'
  let g:airline_extensions = ['branch', 'hunks', 'whitespace']
endif

" ============================================================================
" vim-signify
" ============================================================================

" NOTE: Temporarily experiment with vim-gitgutter in place of vim-signify.
" " g:signify_vcs_list
" "
" " Only use signify for git
" "
" " This reduces the number of calls and improves performance.
" "
" " https://github.com/mhinz/vim-signify/blob/master/doc/signify.txt#L112
" let g:signify_vcs_list = [ 'git' ]
"
" " Display all changes since last commit, even those that are staged to index.
" "
" " NOTE: No documentation on this. TODO: Determine status of this setting.
" let g:signify_diffoptions = { 'git': 'HEAD' }
"
" " g:signify_disable_by_default
" "
" " Disable vim-signfiy by default.
" "
" " > This loads Sy, but it won't look for changes. You can toggle it anytime
" " > via :SignifyToggle.
" "
" " https://github.com/mhinz/vim-signify/blob/master/doc/signify.txt#L195
" let g:signify_disable_by_default = 1
"
" " Map command-R to :SignifyRefresh in MacVim
" if has("gui_macvim")
"   map <D-r> :SignifyRefresh<CR>
" endif
