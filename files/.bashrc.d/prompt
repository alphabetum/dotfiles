#==========================================================================
# Shell prompt settings.
# default: host:~ user$
# colors denoted with \[\033[Xm\] where X is the color's number
#==========================================================================

##################################
# a function to get a git branch for display in the prompt
# http://www.simplisticcomplexity.com/2008/03/13/show-your-git-branch-name-in-your-prompt/
##################################

function parse_git_branch {
  git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
}


##################################
# Display the working directory in the prompt, truncated with a leading "..."
# when it reaches the character limit. Preseve ~ when in home directory.
# host:~/dirname user$ if ab_path_minus_Users/username < char limit
# host:up_to_23_chars_of_ab_path_minus_Users/username user$ if > char limit
# without color: '\h:\w \u$ '
# http://tldp.org/HOWTO/Bash-Prompt-HOWTO/
##################################

function prompt_command () {
    #   How many characters of the $PWD should be kept
    local pwd_length=23
      if [ $(echo -n $PWD | wc -c | tr -d " ") -gt $pwd_length ]; then
      if [ $(echo -n $PWD | egrep -o /Users/$(id -un) | wc -c | tr -d " ") -gt 0 ]; then
        local user_length=$(echo -n $PWD | egrep -o /Users/$(id -un) | wc -c | tr -d " ");
        local total_length=$(echo -n $PWD | wc -c | tr -d " ");
        let "newPwd_length=$total_length-$user_length";

        if [ $newPwd_length -gt $pwd_length ]; then
          # when in home and path minus users/username is longer than char limit
          newPWD="$(echo -n $PWD | sed -e "s/.*\(.\{$pwd_length\}\)/\1/")";export PS1='\[\033[45;30m\] \[\033[0;7;34m\]\u\[\033[0;0;32m\]@\[\033[0;0;34m\][\h]:\[\033[0;0;37m\]~\[\033[0;4;31m\]...\[\033[0;0;37m\]$newPWD $(vcprompt)\[\033[0;0;32m\]$\[\033[0m\] '
        else
          # when in home and path minus users/username is less than limit
          newPWD="$(echo -n $PWD | sed -e "s/.*\(.\{$newPwd_length\}\)/\1/")";export PS1='\[\033[45;30m\] \[\033[0;7;34m\]\u\[\033[0;0;32m\]@\[\033[0;0;34m\][\h]:\[\033[0;0;37m\]~/$newPWD $(vcprompt)\[\033[0;0;32m\]$\[\033[0m\] '
        fi
      else
        # when not in home and path is longer than char limit
        newPWD="$(echo -n $PWD | sed -e "s/.*\(.\{$pwd_length\}\)/\1/")";export PS1='\[\033[45;30m\] \[\033[0;7;34m\]\u\[\033[0;0;32m\]@\[\033[0;0;34m\][\h]:\[\033[0;4;31m\]...\[\033[0;0;37m\]$newPWD $(vcprompt)\[\033[0;0;32m\]$\[\033[0m\] '
      fi
    # when not in home and path is shorter than char limit
    else export PS1='\[\033[45;30m\] \[\033[0;7;34m\]\u\[\033[0;0;32m\]@\[\033[0;0;34m\][\h]:\[\033[0;0;37m\]\w $(vcprompt)\[\033[0;0;32m\]$\[\033[0m\] '
  fi
}
PROMPT_COMMAND=prompt_command
export PROMPT_COMMAND

##################################
# UNUSED - above is derived from this
# host:absolute_path user$ if < 23 chars
# host:23_chars_of_absolute_path user$ if > 23 chars
##################################

<<\COMMENT
function prompt_command {
     #   How many characters of the $PWD should be kept
     local pwd_length=23
     if [ $(echo -n $PWD | wc -c | tr -d " ") -gt $pwd_length ]
         then newPWD="$(echo -n $PWD | sed -e "s/.*\(.\{$pwd_length\}\)/\1/")"
         else newPWD="echo -n $PWD"
     fi
}
PROMPT_COMMAND=prompt_command
export PROMPT_COMMAND
#export PS1='\h:$newPWD \u$ '
export PS1=$newPWD
COMMENT
