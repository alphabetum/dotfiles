#!/usr/bin/env bash
###############################################################################
# icons
#
# Swap icons of specified apps with custom icons included in $DOTFILES/vendor
###############################################################################

###############################################################################
# Platform Check
###############################################################################

if [[ ! "$OSTYPE" =~ ^darwin ]]
then
  printf "icons is only supported on OS X.\nSkipping...\n"
  exit 0
fi

###############################################################################
# Base paths and function
###############################################################################

_SOURCE_ICON_DIR="${DOTFILES}/vendor/local/customizations/icons"
_LOCAL_APP_DIR="${HOME}/Applications"

# _swap_icons()
#
# Usage:
#   _swap_icons </source/path> </destination/path>
#
# Description:
#   Append '.bak' to the filename of the item at the destination path, then
#   copy the item at the source path to the destination's non-.bak location.
_swap_icons() {
  local _source_path="${1:-}"
  local _destination_path="${2:-}"

  if [[ -z "${_source_path}" ]]
  then
    printf "No source path provided.\n"
    exit 1
  elif [[ ! -e "${_source_path}" ]]
  then
    printf "No such file or directory: %s\n" "${_source_path}"
    exit 1
  fi
  if [[ -z "${_destination_path}" ]]
  then
    printf "No destination path provided.\n"
    exit 1
  elif [[ ! -e "${_destination_path}" ]]
  then
    printf "No such file or directory: %s\n" "${_destination_path}"
    exit 1
  fi

  local _source_hash
  local _destination_hash

  _source_hash="$(md5 -q "${_source_path}")"
  _destination_hash="$(md5 -q "${_destination_path}")"
  if [[ "${_source_hash}" == "${_destination_hash}" ]]
  then
    return 0
  fi

  if [[ -e "${_destination_path}.bak" ]]
  then
    printf "Exists: %s\nSkipping...\n" "${_destination_path}.bak"
    return 0
  fi

  mv "${_destination_path}" "${_destination_path}.bak"
  cp "${_source_path}" "${_destination_path}"

  # touch .app directory to refresh icons
  local _destination_directory_path
  _destination_directory_path="$(dirname "${_destination_path}")"
  touch "${_destination_directory_path}/../.."

  cat <<HEREDOC
Updated icon:
  ${_source_path} -> ${_destination_path}
HEREDOC
}
###############################################################################
# iTerm2
###############################################################################

# _swap_iterm2_icons
#
# Usage:
#   _swap_iterm2_icons
#
# Description:
#   Swap icons for homebrew cask-installed iterm2.
#
#   NOTE: in the current (2015/10) nightly, the icon is in a different location
#   from the current release version
_swap_iterm2_icons() {
  local _app_matches=()
  local _app_path
  _app_matches=($(
    mdfind 'kMDItemContentType == "com.apple.application-bundle" && kMDItemFSName = "iTerm.app"'
  ))
  _app_path="${_app_matches[0]:-}"
  if [[ -z "${_app_path}" ]] || [[ ! -e "${_app_path}" ]]
  then
    printf "iTerm.app not found.\n"
    exit 1
  fi

  local _nightly_icon_path="${_app_path}/Contents/Resources/AppIcon.icns"
  if [[ -e "${_nightly_icon_path}" ]]
  then
    _swap_icons \
      "${_SOURCE_ICON_DIR}/iTerm2.icns" \
      "${_nightly_icon_path}"
  else
    _swap_icons \
      "${_SOURCE_ICON_DIR}/iTerm2.icns" \
      "${_LOCAL_APP_DIR}/iTerm.app/Contents/Resources/iTerm.icns"
  fi
}
_swap_iterm2_icons

###############################################################################
# Macvim
###############################################################################

# _swap_macvim_icons
#
# Usage:
#   _swap_macvim_icons
#
# Description:
#   Swap icons for homebrew-installed MacVim.
_swap_macvim_icons() {
  _swap_icons \
    "${_SOURCE_ICON_DIR}/MacVim.icns" \
    "${_LOCAL_APP_DIR}/MacVim.app/Contents/Resources/MacVim.icns"
  _swap_icons \
    "${_SOURCE_ICON_DIR}/MacVim.icns" \
    "${_LOCAL_APP_DIR}/MacVim.app/Contents/Resources/MacVim-generic.icns"
}
_swap_macvim_icons
