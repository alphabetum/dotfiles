#!/usr/bin/env bash
#########################################################################
# orphans - a bask extension script
#
# Add this script and bask to your $PATH. For usage information, run:
# orphans help
#########################################################################

source "$(which bask)"

###############################################################################
# Utility Functions
###############################################################################

# _is_installed_with_homebrew()
#
# Determine if a Homebrew formula is installed.
#
# Usage:
#   _is_installed_with_homebrew "libgit2"
_is_installed_with_homebrew() {
  brew list -1 | grep -q "^${1}\$"
}

# _remove()
#
# If a `trash` command is present in the environment, use that to remove the
# provided path, otherwise, use rm -rf
#
# Usage:
#   _remove /path/to/a/file/or/directory/
_remove() {
  if [[ -f "$(which trash)" ]]
  then
    trash "$1"
  else
    rm -rf "$1"
  fi
}

###############################################################################
# Commands
###############################################################################

# Install / Uninstall #########################################################

# -------------------------------------------------------------------- alcatraz

desc "alcatraz" <<EOM
Usage:
  $_ME alcatraz

Description:
  The package manager for Xcode.

  Alcatraz is an open-source package manager for Xcode. It lets you discover
  and install plugins, templates and color schemes without the need for
  manually cloning or copying files. It installs itself as a part of Xcode and
  it feels like home.

  http://alcatraz.io/
  https://github.com/supermarin/Alcatraz
EOM
alcatraz() {
  local _dev_shared_path
  local _install_location
  _dev_shared_path="${HOME}/Library/Application Support/Developer/Shared"
  _install_location="${_dev_shared_path}/Xcode/Plug-ins/Alcatraz.xcplugin"
  if [[ -e "$_install_location" ]]
  then
    printf "alcatraz is already installed.\n" && exit 0
  fi
  printf ">> Installing alcatraz\n"
  curl \
    -fsSL \
    https://raw.github.com/supermarin/Alcatraz/master/Scripts/install.sh | sh
}

desc "alcatraz_uninstall" <<EOM
Usage:
  $_ME alcatraz_uninstall [--remove-packages]

Options:
  --remove-packages  Remove packages

Description:
  Uninstall alcatraz.
EOM
alcatraz_uninstall() {
  local _dev_shared_path
  local _install_location
  local _packages_path

  _dev_shared_path="${HOME}/Library/Application Support/Developer/Shared"
  _install_location="${_dev_shared_path}/Xcode/Plug-ins/Alcatraz.xcplugin"

  _packages_path="${HOME}/Library/Application Support/Alcatraz/"

  printf ">> Uninstalling alcatraz...\n"
  [[ -e "$_install_location" ]] && _remove "$_install_location"

  if _command_argv_includes "--remove-packages"
  then
  printf ">> Removing alcatraz packages...\n"
    [[ -e "$_packages_path" ]] && _remove "$_packages_path"
  fi
}

# ------------------------------------------------------------------------- exa

desc "exa" <<EOM
Usage:
  $_ME exa

Description:
  \`exa\` is a modern replacement for ls. It uses colours for information by
  default, helping you distinguish between many types of files, such as whether
  you are the owner, or in the owning group. It also has extra features not
  present in the original ls, such as viewing the Git status for a directory,
  or recursing into directories with a tree view. \`exa\` is written in Rust,
  so it's small, fast, and portable.

  http://bsago.me/exa/

  NOTE: included as an orhan because a rust crate doesn't appear to exist for
  it yet and, therefore, it needs to be built with cargo.
EOM
exa() {
  # Don't install if exa is already installed.
  if [[ -f "$HOME/bin/exa" ]]
  then
    printf "exa already installed.\n" && exit 0
  fi
  # Make sure cmake is installed
  if [[ ! -f "$(which cmake)" ]]
  then
    printf "Install cmake dependency.\n" && exit 0
  fi
  # Make sure libgit2 is installed.
  if ! _is_installed_with_homebrew "libgit2"
  then
    printf "Install libgit2 dependency.\n" && exit 0
  fi

  printf ">> Installing exa\n"

  local binary_name="exa"
  local tmp_repo=/tmp/orphans/exa
  local remote_url=https://github.com/ogham/exa.git

  export PREFIX="$HOME"
  git clone "$remote_url" "$tmp_repo" &&
    cd "$tmp_repo" &&
    make install &&
    cd "/tmp/orphans" &&
    _remove "$tmp_repo"
  unset PREFIX
}

desc "exa_uninstall" <<EOM
Usage:
  $_ME exa_uninstall

Description:
  Uninstall exa
EOM
exa_uninstall() {
  printf ">> Uninstalling exa\n"
  [[ -e "$HOME/bin/exa"    ]] && _remove "$HOME/bin/exa"
  [[ -e "/tmp/orphans/exa" ]] && _remove "/tmp/orphans/exa"

}

# ------------------------------------------------------------------------ iota

desc "iota" <<EOM
Usage:
  $_ME iota

Description:
  Iota is a terminal-based text-editor written in Rust.

  https://github.com/gchp/iota

  NOTE: included as an orhan because a rust crate doesn't appear to exist for
  it yet and, therefore, it needs to be built with cargo.
EOM
iota() {
  # Don't install if already installed.
  if [[ -f "$HOME/bin/iota" ]]
  then
    printf "iota already installed.\n" && exit 0
  fi

  printf ">> Installing iota\n"

  local binary_name="iota"
  local tmp_repo=/tmp/orphans/iota
  local remote_url=https://github.com/gchp/iota.git

  git clone "$remote_url" "$tmp_repo" &&
    cd "$tmp_repo" &&
    cargo build &&
    cp "$tmp_repo/target/$binary_name" "$HOME/bin" &&
    cd "/tmp/orphans" &&
    _remove "$tmp_repo"
}

desc "iota_uninstall" <<EOM
Usage:
  $_ME iota_uninstall

Description:
  Uninstall iota
EOM
iota_uninstall() {
  printf ">> Uninstalling iota\n"
  [[ -e "$HOME/bin/iota"    ]] && _remove "$HOME/bin/iota"
  [[ -e "/tmp/orphans/iota" ]] && _remove "/tmp/orphans/iota"
}

# ---------------------------------------------------------------------- meteor

desc "meteor" <<EOM
Usage:
  $_ME meteor

Description:
  Meteor is an ultra-simple environment for building modern web applications.

  With Meteor you write apps:
  - in pure JavaScript
  - that send data over the wire, rather than HTML
  - using your choice of popular open-source libraries
  - Documentation is available at http://docs.meteor.com/

  https://www.meteor.com/
  https://github.com/meteor/meteor
  https://install.meteor.com/
EOM
meteor() {
  if [[ -f "/usr/local/bin/meteor" ]]
  then
    printf "meteor is already installed.\n" && exit 0
  fi
  printf ">> Installing meteor\n"
  curl https://install.meteor.com | /bin/sh
}

desc "meteor_uninstall" <<EOM
Usage:
  $_ME meteor_uninstall

Description:
  Unisntall Meteor
EOM
meteor_uninstall() {
  printf ">> Uninstalling meteor\n"
  [[ -e "$HOME/.meteor/"        ]] && _remove "$HOME/.meteor/"
  [[ -e "/usr/local/bin/meteor" ]] && _remove "/usr/local/bin/meteor"
}

# ---------------------------------------------------------------------- zindex

desc "zindex" <<EOM
Usage:
  $_ME zindex

Description:
  Create an index on a compressed text file

  zindex creates and queries an index on a compressed, line-based text file in
  a time- and space-efficient way.

  https://github.com/mattgodbolt/zindex
EOM
zindex() {
  # Don't install if already installed.
  if [[ -f "$HOME/bin/zindex" ]]
  then
    printf "zindex (zindex) already installed.\n" && exit 0
  fi
  if [[ -f "$HOME/bin/zq" ]]
  then
    printf "zindex (zq) already installed.\n" && exit 0
  fi

  local tmp_repo=/tmp/orphans/zindex
  local remote_url=https://github.com/mattgodbolt/zindex.git

  git clone "$remote_url" "$tmp_repo" &&
    cd "$tmp_repo" &&
    make &&
    cp "$tmp_repo/build/Release/zindex" "$HOME/bin" &&
    cp "$tmp_repo/build/Release/zq" "$HOME/bin" &&
    cd "/tmp/orphans" &&
    _remove "$tmp_repo"
}

desc "zindex_uninstall" <<EOM
Usage:
  $_ME zindex_uninstall

Description:
  Uninstall zindex
EOM
zindex_uninstall() {
  printf ">> Uninstalling zindex\n"
  local tmp_location="/tmp/orphans/zindex"
  [[ -e "$tmp_location"       ]] && _remove "$tmp_location"
  [[ -e "$HOME/bin/zq"        ]] && _remove "$HOME/bin/zq"
  [[ -e "$HOME/bin/zindex"    ]] && _remove "$HOME/bin/zindex"
}

###############################################################################
# Run Program
###############################################################################

# Platform Check
#
# Limit to OS X, which is the primary platform for this configuration at the
# moment.
if [[ ! "$OSTYPE" =~ ^darwin ]]
then
  printf "orphans is only supported on OS X\nSkipping...\n"
  exit 0
fi

_main
