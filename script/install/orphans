#!/usr/bin/env bash
#########################################################################
# orphans - a bask extension script
#
# Add this script and bask to your $PATH. For usage information, run:
# orphans help
#########################################################################

source "$(which bask)"

###############################################################################
# Utility Functions
###############################################################################

# _is_installed_with_homebrew()
#
# Determine if a Homebrew formula is installed.
#
# Usage:
#   _is_installed_with_homebrew "libgit2"
_is_installed_with_homebrew() {
  brew list -1 | grep -q "^${1}\$"
}

# _remove()
#
# If a `trash` command is present in the environment, use that to remove the
# provided path, otherwise, use rm -rf
#
# Usage:
#   _remove /path/to/a/file/or/directory/
_remove() {
  if [[ -f "$(which trash)" ]]; then
    trash "$1"
  else
    rm -rf "$1"
  fi
}

###############################################################################
# Commands
###############################################################################

# Install / Uninstall #########################################################

# ------------------------------------------------------------------------ bish

desc bish <<-EOM
Usage:
  $_me bish

Description:

Bish is a language that compiles to Bash. It's designed to give shell scripting
a more comfortable and modern feel.

https://github.com/tdenniston/bish
EOM
bish() {
  # Don't install if already installed.
  if [[ -f "$HOME/bin/bish" ]]; then
    printf "bish already installed.\n" && exit 0
  fi

  local binary_name="bish"
  local tmp_repo="/tmp/orphans/bish"
  local remote_url="https://github.com/tdenniston/bish.git"

  git clone "$remote_url" "$tmp_repo" &&
    cd "$tmp_repo" &&
    make &&
    cp "$tmp_repo/$binary_name" "$HOME/bin" &&
    cd "/tmp/orphans" &&
    _remove "$tmp_repo"
}

desc bish_uninstall <<-EOM
Usage:
  $_me bish_uninstall

Description:

Uninstall bish
EOM
bish_uninstall() {
  printf ">> Uninstalling bish\n"
  [[ -e "$HOME/bin/bish"    ]] && _remove "$HOME/bin/bish"
  [[ -e "/tmp/orphans/bish" ]] && _remove "/tmp/orphans/bish"

}

# ------------------------------------------------------------------------- exa

desc exa <<-EOM
Usage:
  $_me exa

Description:

exa is a modern replacement for ls. It uses colours for information by
default, helping you distinguish between many types of files, such as whether
you are the owner, or in the owning group. It also has extra features not
present in the original ls, such as viewing the Git status for a directory,
or recursing into directories with a tree view. exa is written in Rust, so
it's small, fast, and portable.

http://bsago.me/exa/

NOTE: included as an orhan because a rust crate doesn't appear to exist for
it yet and, therefore, it needs to be built with cargo.
EOM
exa() {
  # Don't install if exa is already installed.
  if [[ -f "$HOME/bin/exa" ]]; then
    printf "exa already installed.\n" && exit 0
  fi
  # Make sure cmake is installed
  if [[ ! -f "$(which cmake)" ]]; then
    printf "Install cmake dependency.\n" && exit 0
  fi
  # Make sure libgit2 is installed.
  if ! ( _is_installed_with_homebrew "libgit2" ); then
    printf "Install libgit2 dependency.\n" && exit 0
  fi

  printf ">> Installing exa\n"

  local binary_name="exa"
  local tmp_repo=/tmp/orphans/exa
  local remote_url=https://github.com/ogham/exa.git

  git clone "$remote_url" "$tmp_repo" &&
    cd "$tmp_repo" &&
    cargo build &&
    cp "$tmp_repo/target/$binary_name" "$HOME/bin" &&
    cd "/tmp/orphans" &&
    _remove "$tmp_repo"
}

desc exa_uninstall <<-EOM
Usage:
  $_me exa_uninstall

Description:

Uninstall exa
EOM
exa_uninstall() {
  printf ">> Uninstalling exa\n"
  [[ -e "$HOME/bin/exa"    ]] && _remove "$HOME/bin/exa"
  [[ -e "/tmp/orphans/exa" ]] && _remove "/tmp/orphans/exa"

}

# ------------------------------------------------------------------------ iota

desc iota <<-EOM
Usage:
  $_me iota

Description:

Iota is a terminal-based text-editor written in Rust.

https://github.com/gchp/iota

NOTE: included as an orhan because a rust crate doesn't appear to exist for
it yet and, therefore, it needs to be built with cargo.
EOM
iota() {
  # Don't install if already installed.
  if [[ -f "$HOME/bin/iota" ]]; then
    printf "iota already installed.\n" && exit 0
  fi

  printf ">> Installing iota\n"

  local binary_name="iota"
  local tmp_repo=/tmp/orphans/iota
  local remote_url=https://github.com/gchp/iota.git

  git clone "$remote_url" "$tmp_repo" &&
    cd "$tmp_repo" &&
    cargo build &&
    cp "$tmp_repo/target/$binary_name" "$HOME/bin" &&
    cd "/tmp/orphans" &&
    _remove "$tmp_repo"
}

desc iota_uninstall <<-EOM
Usage:
  $_me iota_uninstall

Description:

Uninstall iota
EOM
iota_uninstall() {
  printf ">> Uninstalling iota\n"
  [[ -e "$HOME/bin/iota"    ]] && _remove "$HOME/bin/iota"
  [[ -e "/tmp/orphans/iota" ]] && _remove "/tmp/orphans/iota"
}

# ---------------------------------------------------------------------- meteor

desc meteor <<-EOM
Usage:
  $_me meteor

Description:

Meteor is an ultra-simple environment for building modern web applications.

With Meteor you write apps:

- in pure JavaScript
- that send data over the wire, rather than HTML
- using your choice of popular open-source libraries
- Documentation is available at http://docs.meteor.com/

https://www.meteor.com/
https://github.com/meteor/meteor
https://install.meteor.com/
EOM
meteor() {
  if [[ -f "/usr/local/bin/meteor" ]]; then
    printf "meteor is already installed.\n" && exit 0
  fi
  printf ">> Installing meteor\n"
  curl https://install.meteor.com | /bin/sh
}

desc meteor_uninstall <<-EOM
Usage:
  $_me meteor_uninstall

Description:

Unisntall Meteor
EOM
meteor_uninstall() {
  printf ">> Uninstalling meteor\n"
  [[ -e "$HOME/.meteor/"        ]] && _remove "$HOME/.meteor/"
  [[ -e "/usr/local/bin/meteor" ]] && _remove "/usr/local/bin/meteor"
}

# -------------------------------------------------------------- neovim-dot-app

desc neovim_dot_app <<-EOM
Usage:
  $_me neovim_dot_app

Description:

OS X GUI for NeoVim.

https://github.com/rogual/neovim-dot-app
EOM
neovim_dot_app() {
  local install_location="$HOME/Applications/NeoVim.app"

  if [[ -f "$install_location" ]]; then
    printf "neovim-dot-app is already installed.\n" && exit 0
  fi

  printf ">> Installing neovim-dot-app\n"

  local tmp_repo=/tmp/orphans/neovim-dot-app
  local remote_url=https://github.com/rogual/neovim-dot-app.git

  git clone "$remote_url" "$tmp_repo" &&
    cd "$tmp_repo" &&
    make &&
    mv "${tmp_repo}/build/NeoVim.app" "$install_location" &&
    _remove "$tmp_repo"
}

desc neovim_dot_app_uninstall <<-EOM
Usage:
  $_me neovim_dot_app_uninstall

Description:

Unisntall neovim-dot-app
EOM
neovim_dot_app_uninstall() {
  printf ">> Uninstalling neovim-dot-app\n"
  local install_location="$HOME/Applications/NeoVim.app"
  local tmp_location="/tmp/orphans/neovim-dot-app"
  [[ -e "$install_location" ]] && _remove "$install_location"
  [[ -e "$tmp_location" ]] && _remove "$tmp_location"
}

# ------------------------------------------------------------------------- xsv

desc xsv <<-EOM
Usage:
  $_me xsv

Description:

A fast CSV toolkit written in Rust.

xsv is a command line program for indexing, slicing, analyzing, splitting and
joining CSV files.

https://github.com/BurntSushi/xsv

NOTE: included as an orhan because a rust crate doesn't appear to exist for
it yet and, therefore, it needs to be built with cargo.
EOM
xsv() {
  # Don't install if already installed.
  if [[ -f "$HOME/bin/xsv" ]]; then
    printf "xsv already installed.\n" && exit 0
  fi

  printf ">> Installing xsv\n"

  local binary_name="xsv"
  local tmp_repo=/tmp/orphans/xsv
  local remote_url=https://github.com/BurntSushi/xsv.git

  git clone "$remote_url" "$tmp_repo" &&
    cd "$tmp_repo" &&
    cargo build &&
    cp "$tmp_repo/target/$binary_name" "$HOME/bin" &&
    cd "/tmp/orphans" &&
    _remove "$tmp_repo"
}

desc xsv_uninstall <<-EOM
Usage:
  $_me xsv_uninstall

Description:

Uninstall xsv
EOM
xsv_uninstall() {
  printf ">> Uninstalling xsv\n"
  [[ -e "$HOME/bin/xsv"    ]] && _remove "$HOME/bin/xsv"
  [[ -e "/tmp/orphans/xsv" ]] && _remove "/tmp/orphans/xsv"
}

###############################################################################
# Run Program
###############################################################################

# Platform Check
#
# Limit to OS X, which is the primary platform for this configuration at the
# moment.
if [[ ! "$OSTYPE" =~ ^darwin ]]; then
  printf "orphans is only supported on OS X\nSkipping...\n"
  exit 0
fi


_main
