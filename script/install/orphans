#!/usr/bin/env bash
###############################################################################
# Orphans
#
# Programs and packages not available through package managers.
###############################################################################

# Bash 'Strict Mode'
# https://github.com/alphabetum/bash-boilerplate#bash-strict-mode
set -o nounset
set -o errexit
set -o pipefail
IFS="$(printf '\n\t')"

###############################################################################
# Platform Check
#
# Limit to OS X, which is the primary platform for this configuration at the
# moment.
###############################################################################

if [[ ! "$OSTYPE" =~ ^darwin ]]; then
  printf "orphans is only supported on OS X\nSkipping...\n"
  exit 0
fi

###############################################################################
# Utility Functions
###############################################################################

# _is_installed_with_homebrew()
#
# Determine if a Homebrew formula is installed.
#
# Usage:
#   _is_installed_with_homebrew "libgit2"
_is_installed_with_homebrew() {
  brew list -1 | grep -q "^${1}\$"
}

# _remove()
#
# If a `trash` command is present in the environment, use that to remove the
# provided path, otherwise, use rm -rf
#
# Usage:
#   _remove /path/to/a/file/or/directory/
_remove() {
  if [[ -f "$(which trash)" ]]; then
    trash "$1"
  else
    rm -rf "$1"
  fi
}

###############################################################################
# exa
#
# exa is a modern replacement for ls. It uses colours for information by
# default, helping you distinguish between many types of files, such as whether
# you are the owner, or in the owning group. It also has extra features not
# present in the original ls, such as viewing the Git status for a directory,
# or recursing into directories with a tree view. exa is written in Rust, so
# it's small, fast, and portable.
#
# http://bsago.me/exa/
#
# NOTE: included as an orhan because a rust crate doesn't appear to exist for
# it yet and, therefore, it needs to be built with cargo.
#
# Uninstall:
#   _remove "$HOME/bin/exa"
###############################################################################

_exa_install() {
  # Don't install if exa is already installed.
  if [[ -f "$HOME/bin/exa" ]]; then
    printf "exa already installed.\n" && exit 0
  fi
  # Make sure cmake is installed
  if [[ ! -f "$(which cmake)" ]]; then
    printf "Install cmake dependency.\n" && exit 0
  fi
  # Make sure libgit2 is installed.
  if ! ( _is_installed_with_homebrew "libgit2" ); then
    printf "Install libgit2 dependency.\n" && exit 0
  fi

  local tmp_exa=/tmp/orphans/exa

  git clone https://github.com/ogham/exa.git "$tmp_exa" &&
    cd "$tmp_exa" &&
    cargo build &&
    cp "$tmp_exa/target/exa" "$HOME/bin" &&
    cd "/tmp/orphans" &&
    _remove "$tmp_exa"
}

_exa_install

###############################################################################
# Meteor
#
#
# Meteor is an ultra-simple environment for building modern web applications.
#
# With Meteor you write apps:
#
# - in pure JavaScript
# - that send data over the wire, rather than HTML
# - using your choice of popular open-source libraries
# - Documentation is available at http://docs.meteor.com/
#
# https://www.meteor.com/
# https://github.com/meteor/meteor
# https://install.meteor.com/
#
# Uninstall:
#   _remove "$HOME/.meteor/"
#   _remove "/usr/local/bin/meteor"
###############################################################################

_meteor_install() {
  if [[ -f "/usr/local/bin/meteor" ]]; then
    printf "meteor is already installed.\n" && exit 0
  fi
  curl https://install.meteor.com | /bin/sh
}

_meteor_install
