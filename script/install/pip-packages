#!/usr/bin/env bash
###############################################################################
# pip-packages
#
# Install script for pip-install Python 2 packages.
#
# http://www.pip-installer.org/
# https://pip.pypa.io
###############################################################################

###############################################################################
# Update
###############################################################################

pip install --upgrade setuptools
pip install --upgrade pip

###############################################################################
# Install Command
###############################################################################

# pip_install()
#
# Usage:
#   pip_install <package-name>
#
# Description:
#   On linux, install a package to the user prefix (`~/.local`), and globally
#   install on other systems. The --user flag doesn't work properly with
#   homebrew-installed Python: http://git.io/vsfqN
pip_install() {
  if (($#))
  then
    if [[ "$(uname -a)" =~ ^Linux ]]
    then
      pip install --user --upgrade "$@"
    else
      pip install --upgrade "$@"
    fi
  else
    printf "No package specified."
    return 1
  fi
}

###############################################################################
# Helpers
###############################################################################

# _pip_package_is_installed()
#
# Usage:
#   _pip_package_is_installed <name>
#
# Test whether a given pip package is installed on the system.
_pip_package_is_installed() {
  local _name="$1"
  [[ -n "$(pip list | grep "^${_name} (")" ]]
}

###############################################################################
# Packages
###############################################################################

# 1pass
#
# A command line interface for 1Password
#
# https://pypi.python.org/pypi/1pass
# https://github.com/georgebrock/1pass
pip_install 1pass

# Cython
#
# The Cython compiler for writing C extensions for the Python language.
#
# http://cython.org/
# https://github.com/cython/cython
# https://pypi.python.org/pypi/Cython/
pip_install cython

# docutils
#
# Docutils is a modular system for processing documentation into useful
# formats, such as HTML, XML, and LaTeX. For input Docutils supports
# reStructuredText, an easy-to-read, what-you-see-is-what-you-get plaintext
# markup syntax.
#
# https://pypi.python.org/pypi/docutils
# http://docutils.sourceforge.net/
# http://docutils.sourceforge.net/README.html
pip_install docutils

# gcalcli
#
# Google Calendar Command Line Interface
#
# gcalcli is a Python application that allows you to access your Google
# Calendar(s) from a command line.
#
# https://github.com/insanum/gcalcli
pip_install gcalcli

# IPython
#
# A rich architecture for interactive computing.
#
# http://ipython.org/
pip_install "ipython[all]"

# mitmproxy
#
# An interactive console program that allows traffic flows to be intercepted,
# inspected, modified and replayed.
#
# http://mitmproxy.org/
pip_install mitmproxy

# ohmu
#
# Graph space usage in the terminal.
#
# https://github.com/paul-nechifor/ohmu
pip_install ohmu

# neovim
#
# Python client for Neovim. Library for scripting Nvim processes through it's
# msgpack-rpc API.
#
# https://github.com/neovim/python-client
# https://pypi.python.org/pypi/neovim
# http://neovim.org/doc/user/nvim_python.html
pip_install neovim

# Nubo
#
# Nubo is a command line program that allows you to start virtual machines on
# different cloud providers, also making sure you can SSH into those instances
# once they are available.
#
# http://pythonhosted.org/nubo/
# https://github.com/ema/nubo
#
# NOTE: only supports Python 2.7+ as of version 0.7.
pip_install nubo

# Pandas
#
# Flexible and powerful data analysis / manipulation library for Python,
# providing labeled data structures similar to R data.frame objects,
# statistical functions, and much more.
#
# http://pandas.pydata.org/
# https://github.com/pydata/pandas
pip_install pandas

# pep8 - Python style guide checker
#
# pep8 is a tool to check your Python code against some of the style
# conventions in PEP 8.
#
# https://github.com/jcrocholl/pep8
pip_install pep8

# pgcli
#
# Postgres CLI with autocompletion and syntax highlighting
#
# https://github.com/amjith/pgcli
pip_install pgcli

# pre-commit
#
# A framework for managing and maintaining multi-language pre-commit hooks.
#
# http://pre-commit.com/
# https://github.com/pre-commit/pre-commit
pip_install pre-commit

# PyMongo
#
# Python driver for MongoDB
#
# https://pypi.python.org/pypi/pymongo/
# https://api.mongodb.org/python/current/
# https://github.com/mongodb/mongo-python-driver/
pip_install pymongo

# python-Levenshtein
#
# The Levenshtein Python C extension module contains functions for fast
# computation of Levenshtein distance and string similarity
#
# https://github.com/ztane/python-Levenshtein/
# https://pypi.python.org/pypi/python-Levenshtein/
pip_install python-Levenshtein

# saws
#
# A Supercharged AWS Command Line Interface (CLI).
#
# https://github.com/donnemartin/saws
#
# NOTE: uninstall in favor of pip3 installation.
# TODO: remove when this has been uninstalled from all systems.
if _pip_package_is_installed "saws"
then
  pip uninstall saws -y
fi

# virtualenv - Virtual Environments
#
# virtualenv is a tool to create isolated Python environments.
#
# https://virtualenv.pypa.io/en/latest/
# http://docs.python-guide.org/en/latest/dev/virtualenvs/
# https://pypi.python.org/pypi/virtualenv
pip_install virtualenv

# virtualenvwrapper
#
# virtualenvwrapper is a set of extensions to Ian Bickingâ€™s virtualenv tool.
# The extensions include wrappers for creating and deleting virtual
# environments and otherwise managing your development workflow, making it
# easier to work on more than one project at a time without introducing
# conflicts in their dependencies.
#
# https://virtualenvwrapper.readthedocs.org/en/latest/
# https://bitbucket.org/dhellmann/virtualenvwrapper
# https://pypi.python.org/pypi/virtualenvwrapper/
pip_install virtualenvwrapper
