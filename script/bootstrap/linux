#!/usr/bin/env bash
###############################################################################
# Bootstrap dotfiles on a fresh Linux user account.
###############################################################################

###############################################################################
# Platform Check
###############################################################################

# Skip unless Linux
if [[ ! "$(uname -a)" =~ ^Linux ]]
then
  printf "Linux bootstrapping is only supported on Linux.\nSkipping...\n"
  exit 0
fi

###############################################################################
# Utility Commands
###############################################################################

# _die()
#
# Usage:
#   _die printf "Error message. Variable: %s\n" "$0"
#
# A simple function for exiting with an error after executing the specified
# command. The command is expected to print a message and should typically
# be either `echo`, `printf`, or `cat`.
_die() {
  # Prefix die message with "cross mark (U+274C)", often displayed as a red x.
  printf "❌  "
  "$@" 1>&2
  exit 1
}
# die()
#
# Usage:
#   die "Error message. Variable: $0"
#
# Exit with an error and print the specified message.
#
# This is a shortcut for the _die() function that simply echos the message.
die() {
  _die echo "$@"
}

# command_exists()
#
# Usage:
#   command_exists "name"
#
# Description:
#   If the given command name exists, return 0, otherwise return 1.
#
#   For information on why `which` is not being used, see:
#   http://stackoverflow.com/a/677212
command_exists() {
  hash "$1" 2>/dev/null
}

###############################################################################
# Bootstrap
###############################################################################

# Might as well ask for password up-front, right?
sudo -v
# Keep-alive: update existing sudo time stamp if set, otherwise do nothing.
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

#------------------------------------------------------------------------------

# /////////////////////////////////////////////////////////////////////////////
# Configure
# /////////////////////////////////////////////////////////////////////////////

export BINDLEPATH="${HOME}/.bindle"

if [[ ! -e "${HOME}/bin" ]]
then
  mkdir "${HOME}/bin"
fi

# ssh #########################################################################

if [[ -d "${HOME}/.ssh" ]]
then
  cp "${HOME}/.ssh/"* "${BINDLEPATH}/home/.ssh/" ||
    _die printf "Unable to copy .ssh contents.\n"
fi

# bindle ######################################################################

cd "${BINDLEPATH}" ||
  _die printf "Unable to cd into \$BINDLEPATH.\n"
git submodule init ||
  _die printf "\`git submodule init\` failed.\n"
git submodule update --init --recursive ||
  _die printf "\`git submodule update --init --recursive\` failed.\n"
./bin/bindle link --overwrite --with-backup ||
  _die printf "\`./bin/bindle link --overwrite --with-backup\` failed.\n"
./bin/bindle bin link ||
  _die printf "\`./bin/bindle bin link\` failed.\n"

# Janus #######################################################################

# Finalize Janus setup.
_initialize_janus() {
  cd "${BINDLEPATH}/home/.vim/" ||
    _die printf "\`cd \"\${BINDLEPATH}/home/.vim/\"\` failed.\n"

  rake || _die printf "Janus bootstrap failed."

  cd "${BINDLEPATH}" ||
    _die printf "\`cd \"\${BINDLEPATH}\"\` failed.\n"
}
if command_exists "rake"
then
  _initialize_janus
else
  if command_exists "ruby"
  then
    gem install rake
    _initialize_janus
  else
    printf "Ruby and Rake not found. Janus not completely initialized."
  fi
fi

# Re-source .bashrc now that the configuration has been installed.
#
# https://github.com/koalaman/shellcheck/wiki/SC1090
# shellcheck source=~/.bashrc
source "${HOME}/.bashrc"

# /////////////////////////////////////////////////////////////////////////////
# Install
# /////////////////////////////////////////////////////////////////////////////

# brew-linux ##################################################################

./bin/bindle install brew-linux ||
  _die printf "\`./bin/bindle install brew-linux\` failed.\n"

# apt-packages ################################################################

if command_exists "apt-get"
then
  ./bin/bindle install apt-packages  ||
    _die printf "\`./bin/bindle install apt-packages\` failed.\n"
fi

# exa #########################################################################

# Install exa.
if [[ -e "${BINDLEPATH}/bin/orphans" ]]
then
  "${BINDLEPATH}/bin/orphans" exa:up
else
  printf "WARNING: %s not found.\n" "${BINDLEPATH}/bin/orphans"
fi

# /////////////////////////////////////////////////////////////////////////////
# Finalize
# /////////////////////////////////////////////////////////////////////////////

# zsh ########################################################################

# Set shell to zsh if it's available.
_ZSH_PATH="$(which zsh)"
if [[ -n "$_ZSH_PATH" ]]
then
  sudo chsh -s "$_ZSH_PATH" "$(whoami)"
  if [[ $- == *i* ]]
  then # interactive shell
    "$_ZSH_PATH" --login
  fi
fi
